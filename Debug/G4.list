
G4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035ac  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08003784  08003784  00013784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037d4  080037d4  00020050  2**0
                  CONTENTS
  4 .ARM          00000008  080037d4  080037d4  000137d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037dc  080037dc  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037dc  080037dc  000137dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037e0  080037e0  000137e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  080037e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000050  08003834  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08003834  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1d4  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001898  00000000  00000000  0002c254  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b40  00000000  00000000  0002daf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a68  00000000  00000000  0002e630  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002416c  00000000  00000000  0002f098  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000084f8  00000000  00000000  00053204  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e7a84  00000000  00000000  0005b6fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00143180  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e70  00000000  00000000  001431fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000050 	.word	0x20000050
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800376c 	.word	0x0800376c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000054 	.word	0x20000054
 8000214:	0800376c 	.word	0x0800376c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 fc47 	bl	8000dae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f830 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 f9bc 	bl	80008a0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000528:	f000 f924 	bl	8000774 <MX_LPUART1_UART_Init>
  MX_FDCAN1_Init();
 800052c:	f000 f896 	bl	800065c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000530:	f000 f8dc 	bl	80006ec <MX_FDCAN2_Init>
  MX_USART1_UART_Init();
 8000534:	f000 f968 	bl	8000808 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  FDCAN_Config();
 8000538:	f000 fa22 	bl	8000980 <FDCAN_Config>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  	  /* Start the Transmission process */
	  	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) == HAL_OK)
 800053c:	4a0e      	ldr	r2, [pc, #56]	; (8000578 <main+0x60>)
 800053e:	490f      	ldr	r1, [pc, #60]	; (800057c <main+0x64>)
 8000540:	480f      	ldr	r0, [pc, #60]	; (8000580 <main+0x68>)
 8000542:	f001 f805 	bl	8001550 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d10d      	bne.n	8000568 <main+0x50>
	  	  {
	  		/* Transmission request Error */
	  		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800054c:	2120      	movs	r1, #32
 800054e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000552:	f001 fac3 	bl	8001adc <HAL_GPIO_TogglePin>
	  		HAL_Delay(100);
 8000556:	2064      	movs	r0, #100	; 0x64
 8000558:	f000 fc9a 	bl	8000e90 <HAL_Delay>
	  		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800055c:	2120      	movs	r1, #32
 800055e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000562:	f001 fabb 	bl	8001adc <HAL_GPIO_TogglePin>
 8000566:	e001      	b.n	800056c <main+0x54>
	  	  }
	  	  else
	  	  {
	  		Error_Handler();
 8000568:	f000 fa64 	bl	8000a34 <Error_Handler>
	  	  }
	  	  HAL_Delay(500);
 800056c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000570:	f000 fc8e 	bl	8000e90 <HAL_Delay>
	  	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) == HAL_OK)
 8000574:	e7e2      	b.n	800053c <main+0x24>
 8000576:	bf00      	nop
 8000578:	20000000 	.word	0x20000000
 800057c:	200001f4 	.word	0x200001f4
 8000580:	20000188 	.word	0x20000188

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b0a8      	sub	sp, #160	; 0xa0
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800058e:	2238      	movs	r2, #56	; 0x38
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f003 f8e2 	bl	800375c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a8:	463b      	mov	r3, r7
 80005aa:	2254      	movs	r2, #84	; 0x54
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 f8d4 	bl	800375c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005b8:	f001 face 	bl	8001b58 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005bc:	2301      	movs	r3, #1
 80005be:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005cc:	2303      	movs	r3, #3
 80005ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 80005d2:	2303      	movs	r3, #3
 80005d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 20;
 80005d8:	2314      	movs	r3, #20
 80005da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005de:	2302      	movs	r3, #2
 80005e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ea:	2302      	movs	r3, #2
 80005ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005f4:	4618      	mov	r0, r3
 80005f6:	f001 fb63 	bl	8001cc0 <HAL_RCC_OscConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000600:	f000 fa18 	bl	8000a34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000604:	230f      	movs	r3, #15
 8000606:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000608:	2303      	movs	r3, #3
 800060a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000618:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800061c:	2102      	movs	r1, #2
 800061e:	4618      	mov	r0, r3
 8000620:	f001 fe66 	bl	80022f0 <HAL_RCC_ClockConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800062a:	f000 fa03 	bl	8000a34 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 800062e:	f241 0321 	movw	r3, #4129	; 0x1021
 8000632:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800063c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000640:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000642:	463b      	mov	r3, r7
 8000644:	4618      	mov	r0, r3
 8000646:	f002 f86f 	bl	8002728 <HAL_RCCEx_PeriphCLKConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000650:	f000 f9f0 	bl	8000a34 <Error_Handler>
  }
}
 8000654:	bf00      	nop
 8000656:	37a0      	adds	r7, #160	; 0xa0
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000660:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <MX_FDCAN1_Init+0x88>)
 8000662:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <MX_FDCAN1_Init+0x8c>)
 8000664:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000666:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <MX_FDCAN1_Init+0x88>)
 8000668:	2200      	movs	r2, #0
 800066a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <MX_FDCAN1_Init+0x88>)
 800066e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000672:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000674:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <MX_FDCAN1_Init+0x88>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800067a:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <MX_FDCAN1_Init+0x88>)
 800067c:	2200      	movs	r2, #0
 800067e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000680:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <MX_FDCAN1_Init+0x88>)
 8000682:	2200      	movs	r2, #0
 8000684:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000686:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <MX_FDCAN1_Init+0x88>)
 8000688:	2200      	movs	r2, #0
 800068a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800068c:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <MX_FDCAN1_Init+0x88>)
 800068e:	2201      	movs	r2, #1
 8000690:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 50;
 8000692:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <MX_FDCAN1_Init+0x88>)
 8000694:	2232      	movs	r2, #50	; 0x32
 8000696:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 109;
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <MX_FDCAN1_Init+0x88>)
 800069a:	226d      	movs	r2, #109	; 0x6d
 800069c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 50;
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_FDCAN1_Init+0x88>)
 80006a0:	2232      	movs	r2, #50	; 0x32
 80006a2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_FDCAN1_Init+0x88>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_FDCAN1_Init+0x88>)
 80006ac:	2205      	movs	r2, #5
 80006ae:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_FDCAN1_Init+0x88>)
 80006b2:	220a      	movs	r2, #10
 80006b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_FDCAN1_Init+0x88>)
 80006b8:	2205      	movs	r2, #5
 80006ba:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_FDCAN1_Init+0x88>)
 80006be:	2200      	movs	r2, #0
 80006c0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <MX_FDCAN1_Init+0x88>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_FDCAN1_Init+0x88>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_FDCAN1_Init+0x88>)
 80006d0:	f000 fd10 	bl	80010f4 <HAL_FDCAN_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80006da:	f000 f9ab 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000188 	.word	0x20000188
 80006e8:	40006400 	.word	0x40006400

080006ec <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80006f0:	4b1e      	ldr	r3, [pc, #120]	; (800076c <MX_FDCAN2_Init+0x80>)
 80006f2:	4a1f      	ldr	r2, [pc, #124]	; (8000770 <MX_FDCAN2_Init+0x84>)
 80006f4:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80006f6:	4b1d      	ldr	r3, [pc, #116]	; (800076c <MX_FDCAN2_Init+0x80>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80006fc:	4b1b      	ldr	r3, [pc, #108]	; (800076c <MX_FDCAN2_Init+0x80>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000702:	4b1a      	ldr	r3, [pc, #104]	; (800076c <MX_FDCAN2_Init+0x80>)
 8000704:	2200      	movs	r2, #0
 8000706:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <MX_FDCAN2_Init+0x80>)
 800070a:	2200      	movs	r2, #0
 800070c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800070e:	4b17      	ldr	r3, [pc, #92]	; (800076c <MX_FDCAN2_Init+0x80>)
 8000710:	2200      	movs	r2, #0
 8000712:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000714:	4b15      	ldr	r3, [pc, #84]	; (800076c <MX_FDCAN2_Init+0x80>)
 8000716:	2201      	movs	r2, #1
 8000718:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800071a:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_FDCAN2_Init+0x80>)
 800071c:	2201      	movs	r2, #1
 800071e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <MX_FDCAN2_Init+0x80>)
 8000722:	2202      	movs	r2, #2
 8000724:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_FDCAN2_Init+0x80>)
 8000728:	2202      	movs	r2, #2
 800072a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_FDCAN2_Init+0x80>)
 800072e:	2201      	movs	r2, #1
 8000730:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_FDCAN2_Init+0x80>)
 8000734:	2201      	movs	r2, #1
 8000736:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_FDCAN2_Init+0x80>)
 800073a:	2201      	movs	r2, #1
 800073c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_FDCAN2_Init+0x80>)
 8000740:	2201      	movs	r2, #1
 8000742:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_FDCAN2_Init+0x80>)
 8000746:	2200      	movs	r2, #0
 8000748:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_FDCAN2_Init+0x80>)
 800074c:	2200      	movs	r2, #0
 800074e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_FDCAN2_Init+0x80>)
 8000752:	2200      	movs	r2, #0
 8000754:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_FDCAN2_Init+0x80>)
 8000758:	f000 fccc 	bl	80010f4 <HAL_FDCAN_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_FDCAN2_Init+0x7a>
  {
    Error_Handler();
 8000762:	f000 f967 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000240 	.word	0x20000240
 8000770:	40006800 	.word	0x40006800

08000774 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000778:	4b21      	ldr	r3, [pc, #132]	; (8000800 <MX_LPUART1_UART_Init+0x8c>)
 800077a:	4a22      	ldr	r2, [pc, #136]	; (8000804 <MX_LPUART1_UART_Init+0x90>)
 800077c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800077e:	4b20      	ldr	r3, [pc, #128]	; (8000800 <MX_LPUART1_UART_Init+0x8c>)
 8000780:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000784:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b1e      	ldr	r3, [pc, #120]	; (8000800 <MX_LPUART1_UART_Init+0x8c>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <MX_LPUART1_UART_Init+0x8c>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000792:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <MX_LPUART1_UART_Init+0x8c>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b19      	ldr	r3, [pc, #100]	; (8000800 <MX_LPUART1_UART_Init+0x8c>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <MX_LPUART1_UART_Init+0x8c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a4:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_LPUART1_UART_Init+0x8c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_LPUART1_UART_Init+0x8c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MX_LPUART1_UART_Init+0x8c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007b6:	4812      	ldr	r0, [pc, #72]	; (8000800 <MX_LPUART1_UART_Init+0x8c>)
 80007b8:	f002 fa02 	bl	8002bc0 <HAL_UART_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80007c2:	f000 f937 	bl	8000a34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007c6:	2100      	movs	r1, #0
 80007c8:	480d      	ldr	r0, [pc, #52]	; (8000800 <MX_LPUART1_UART_Init+0x8c>)
 80007ca:	f002 febe 	bl	800354a <HAL_UARTEx_SetTxFifoThreshold>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80007d4:	f000 f92e 	bl	8000a34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007d8:	2100      	movs	r1, #0
 80007da:	4809      	ldr	r0, [pc, #36]	; (8000800 <MX_LPUART1_UART_Init+0x8c>)
 80007dc:	f002 fef3 	bl	80035c6 <HAL_UARTEx_SetRxFifoThreshold>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80007e6:	f000 f925 	bl	8000a34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_LPUART1_UART_Init+0x8c>)
 80007ec:	f002 fe74 	bl	80034d8 <HAL_UARTEx_DisableFifoMode>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007f6:	f000 f91d 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000070 	.word	0x20000070
 8000804:	40008000 	.word	0x40008000

08000808 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800080c:	4b22      	ldr	r3, [pc, #136]	; (8000898 <MX_USART1_UART_Init+0x90>)
 800080e:	4a23      	ldr	r2, [pc, #140]	; (800089c <MX_USART1_UART_Init+0x94>)
 8000810:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000812:	4b21      	ldr	r3, [pc, #132]	; (8000898 <MX_USART1_UART_Init+0x90>)
 8000814:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000818:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <MX_USART1_UART_Init+0x90>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <MX_USART1_UART_Init+0x90>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000826:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <MX_USART1_UART_Init+0x90>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <MX_USART1_UART_Init+0x90>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b19      	ldr	r3, [pc, #100]	; (8000898 <MX_USART1_UART_Init+0x90>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	4b17      	ldr	r3, [pc, #92]	; (8000898 <MX_USART1_UART_Init+0x90>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083e:	4b16      	ldr	r3, [pc, #88]	; (8000898 <MX_USART1_UART_Init+0x90>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_USART1_UART_Init+0x90>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800084a:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MX_USART1_UART_Init+0x90>)
 800084c:	2200      	movs	r2, #0
 800084e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000850:	4811      	ldr	r0, [pc, #68]	; (8000898 <MX_USART1_UART_Init+0x90>)
 8000852:	f002 f9b5 	bl	8002bc0 <HAL_UART_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800085c:	f000 f8ea 	bl	8000a34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000860:	2100      	movs	r1, #0
 8000862:	480d      	ldr	r0, [pc, #52]	; (8000898 <MX_USART1_UART_Init+0x90>)
 8000864:	f002 fe71 	bl	800354a <HAL_UARTEx_SetTxFifoThreshold>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800086e:	f000 f8e1 	bl	8000a34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000872:	2100      	movs	r1, #0
 8000874:	4808      	ldr	r0, [pc, #32]	; (8000898 <MX_USART1_UART_Init+0x90>)
 8000876:	f002 fea6 	bl	80035c6 <HAL_UARTEx_SetRxFifoThreshold>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000880:	f000 f8d8 	bl	8000a34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_USART1_UART_Init+0x90>)
 8000886:	f002 fe27 	bl	80034d8 <HAL_UARTEx_DisableFifoMode>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000890:	f000 f8d0 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200000fc 	.word	0x200000fc
 800089c:	40013800 	.word	0x40013800

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	4b2f      	ldr	r3, [pc, #188]	; (8000974 <MX_GPIO_Init+0xd4>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	4a2e      	ldr	r2, [pc, #184]	; (8000974 <MX_GPIO_Init+0xd4>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c2:	4b2c      	ldr	r3, [pc, #176]	; (8000974 <MX_GPIO_Init+0xd4>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ce:	4b29      	ldr	r3, [pc, #164]	; (8000974 <MX_GPIO_Init+0xd4>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	4a28      	ldr	r2, [pc, #160]	; (8000974 <MX_GPIO_Init+0xd4>)
 80008d4:	f043 0320 	orr.w	r3, r3, #32
 80008d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008da:	4b26      	ldr	r3, [pc, #152]	; (8000974 <MX_GPIO_Init+0xd4>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	f003 0320 	and.w	r3, r3, #32
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	4b23      	ldr	r3, [pc, #140]	; (8000974 <MX_GPIO_Init+0xd4>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	4a22      	ldr	r2, [pc, #136]	; (8000974 <MX_GPIO_Init+0xd4>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f2:	4b20      	ldr	r3, [pc, #128]	; (8000974 <MX_GPIO_Init+0xd4>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <MX_GPIO_Init+0xd4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	4a1c      	ldr	r2, [pc, #112]	; (8000974 <MX_GPIO_Init+0xd4>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090a:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_GPIO_Init+0xd4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2120      	movs	r1, #32
 800091a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091e:	f001 f8c5 	bl	8001aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000922:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <MX_GPIO_Init+0xd8>)
 800092a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	4811      	ldr	r0, [pc, #68]	; (800097c <MX_GPIO_Init+0xdc>)
 8000938:	f000 ff36 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800093c:	2320      	movs	r3, #32
 800093e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000940:	2301      	movs	r3, #1
 8000942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	4619      	mov	r1, r3
 8000952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000956:	f000 ff27 	bl	80017a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2100      	movs	r1, #0
 800095e:	2028      	movs	r0, #40	; 0x28
 8000960:	f000 fb93 	bl	800108a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000964:	2028      	movs	r0, #40	; 0x28
 8000966:	f000 fbaa 	bl	80010be <HAL_NVIC_EnableIRQ>

}
 800096a:	bf00      	nop
 800096c:	3728      	adds	r7, #40	; 0x28
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000
 8000978:	10110000 	.word	0x10110000
 800097c:	48000800 	.word	0x48000800

08000980 <FDCAN_Config>:

/* USER CODE BEGIN 4 */
static void FDCAN_Config(void){
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef sFilterConfig;

	  /* Configure Rx filter */
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
	  sFilterConfig.FilterIndex = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800098e:	2302      	movs	r3, #2
 8000990:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000992:	2301      	movs	r3, #1
 8000994:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterID1 = 0x321;
 8000996:	f240 3321 	movw	r3, #801	; 0x321
 800099a:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterID2 = 0x7FF;
 800099c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80009a0:	617b      	str	r3, [r7, #20]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80009a2:	463b      	mov	r3, r7
 80009a4:	4619      	mov	r1, r3
 80009a6:	4821      	ldr	r0, [pc, #132]	; (8000a2c <FDCAN_Config+0xac>)
 80009a8:	f000 fcfe 	bl	80013a8 <HAL_FDCAN_ConfigFilter>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <FDCAN_Config+0x36>
	  {
	    Error_Handler();
 80009b2:	f000 f83f 	bl	8000a34 <Error_Handler>
	  }

	  /* Configure global filter:
	     Filter all remote frames with STD and EXT ID
	     Reject non matching frames with STD ID and EXT ID */
	  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80009b6:	2300      	movs	r3, #0
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	2300      	movs	r3, #0
 80009bc:	2202      	movs	r2, #2
 80009be:	2102      	movs	r1, #2
 80009c0:	481a      	ldr	r0, [pc, #104]	; (8000a2c <FDCAN_Config+0xac>)
 80009c2:	f000 fd4b 	bl	800145c <HAL_FDCAN_ConfigGlobalFilter>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <FDCAN_Config+0x50>
	  {
	    Error_Handler();
 80009cc:	f000 f832 	bl	8000a34 <Error_Handler>
	  }
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80009d0:	4816      	ldr	r0, [pc, #88]	; (8000a2c <FDCAN_Config+0xac>)
 80009d2:	f000 fd95 	bl	8001500 <HAL_FDCAN_Start>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <FDCAN_Config+0x60>
	  {
	    Error_Handler();
 80009dc:	f000 f82a 	bl	8000a34 <Error_Handler>
	  }
	  TxHeader.Identifier = 0x321;
 80009e0:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <FDCAN_Config+0xb0>)
 80009e2:	f240 3221 	movw	r2, #801	; 0x321
 80009e6:	601a      	str	r2, [r3, #0]
	  TxHeader.IdType = FDCAN_STANDARD_ID;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <FDCAN_Config+0xb0>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	605a      	str	r2, [r3, #4]
	  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <FDCAN_Config+0xb0>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
	  TxHeader.DataLength = FDCAN_DLC_BYTES_64;
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <FDCAN_Config+0xb0>)
 80009f6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 80009fa:	60da      	str	r2, [r3, #12]
	  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <FDCAN_Config+0xb0>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
	  TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <FDCAN_Config+0xb0>)
 8000a04:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a08:	615a      	str	r2, [r3, #20]
	  TxHeader.FDFormat = FDCAN_FD_CAN;
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <FDCAN_Config+0xb0>)
 8000a0c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a10:	619a      	str	r2, [r3, #24]
	  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000a12:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <FDCAN_Config+0xb0>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	61da      	str	r2, [r3, #28]
	  TxHeader.MessageMarker = 0;
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <FDCAN_Config+0xb0>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	621a      	str	r2, [r3, #32]

	  HAL_FDCAN_EnableTxDelayCompensation(&hfdcan1);
 8000a1e:	4803      	ldr	r0, [pc, #12]	; (8000a2c <FDCAN_Config+0xac>)
 8000a20:	f000 fd4d 	bl	80014be <HAL_FDCAN_EnableTxDelayCompensation>

}
 8000a24:	bf00      	nop
 8000a26:	3718      	adds	r7, #24
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000188 	.word	0x20000188
 8000a30:	200001f4 	.word	0x200001f4

08000a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
	...

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <HAL_MspInit+0x44>)
 8000a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a4e:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <HAL_MspInit+0x44>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6613      	str	r3, [r2, #96]	; 0x60
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <HAL_MspInit+0x44>)
 8000a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <HAL_MspInit+0x44>)
 8000a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a66:	4a08      	ldr	r2, [pc, #32]	; (8000a88 <HAL_MspInit+0x44>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_MspInit+0x44>)
 8000a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a7a:	f001 f911 	bl	8001ca0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40021000 	.word	0x40021000

08000a8c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08c      	sub	sp, #48	; 0x30
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a38      	ldr	r2, [pc, #224]	; (8000b8c <HAL_FDCAN_MspInit+0x100>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d133      	bne.n	8000b16 <HAL_FDCAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000aae:	4b38      	ldr	r3, [pc, #224]	; (8000b90 <HAL_FDCAN_MspInit+0x104>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	4a36      	ldr	r2, [pc, #216]	; (8000b90 <HAL_FDCAN_MspInit+0x104>)
 8000ab6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000ab8:	4b35      	ldr	r3, [pc, #212]	; (8000b90 <HAL_FDCAN_MspInit+0x104>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d10b      	bne.n	8000ad8 <HAL_FDCAN_MspInit+0x4c>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ac0:	4b34      	ldr	r3, [pc, #208]	; (8000b94 <HAL_FDCAN_MspInit+0x108>)
 8000ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac4:	4a33      	ldr	r2, [pc, #204]	; (8000b94 <HAL_FDCAN_MspInit+0x108>)
 8000ac6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aca:	6593      	str	r3, [r2, #88]	; 0x58
 8000acc:	4b31      	ldr	r3, [pc, #196]	; (8000b94 <HAL_FDCAN_MspInit+0x108>)
 8000ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ad4:	61bb      	str	r3, [r7, #24]
 8000ad6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad8:	4b2e      	ldr	r3, [pc, #184]	; (8000b94 <HAL_FDCAN_MspInit+0x108>)
 8000ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000adc:	4a2d      	ldr	r2, [pc, #180]	; (8000b94 <HAL_FDCAN_MspInit+0x108>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae4:	4b2b      	ldr	r3, [pc, #172]	; (8000b94 <HAL_FDCAN_MspInit+0x108>)
 8000ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	617b      	str	r3, [r7, #20]
 8000aee:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000af0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afe:	2303      	movs	r3, #3
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000b02:	2309      	movs	r3, #9
 8000b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b10:	f000 fe4a 	bl	80017a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8000b14:	e036      	b.n	8000b84 <HAL_FDCAN_MspInit+0xf8>
  else if(hfdcan->Instance==FDCAN2)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a1f      	ldr	r2, [pc, #124]	; (8000b98 <HAL_FDCAN_MspInit+0x10c>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d131      	bne.n	8000b84 <HAL_FDCAN_MspInit+0xf8>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000b20:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <HAL_FDCAN_MspInit+0x104>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	3301      	adds	r3, #1
 8000b26:	4a1a      	ldr	r2, [pc, #104]	; (8000b90 <HAL_FDCAN_MspInit+0x104>)
 8000b28:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000b2a:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <HAL_FDCAN_MspInit+0x104>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d10b      	bne.n	8000b4a <HAL_FDCAN_MspInit+0xbe>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000b32:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <HAL_FDCAN_MspInit+0x108>)
 8000b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b36:	4a17      	ldr	r2, [pc, #92]	; (8000b94 <HAL_FDCAN_MspInit+0x108>)
 8000b38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <HAL_FDCAN_MspInit+0x108>)
 8000b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4a:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_FDCAN_MspInit+0x108>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	4a11      	ldr	r2, [pc, #68]	; (8000b94 <HAL_FDCAN_MspInit+0x108>)
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b56:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <HAL_FDCAN_MspInit+0x108>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8000b62:	f242 0320 	movw	r3, #8224	; 0x2020
 8000b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000b74:	2309      	movs	r3, #9
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4807      	ldr	r0, [pc, #28]	; (8000b9c <HAL_FDCAN_MspInit+0x110>)
 8000b80:	f000 fe12 	bl	80017a8 <HAL_GPIO_Init>
}
 8000b84:	bf00      	nop
 8000b86:	3730      	adds	r7, #48	; 0x30
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40006400 	.word	0x40006400
 8000b90:	2000006c 	.word	0x2000006c
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40006800 	.word	0x40006800
 8000b9c:	48000400 	.word	0x48000400

08000ba0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08c      	sub	sp, #48	; 0x30
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 031c 	add.w	r3, r7, #28
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a3d      	ldr	r2, [pc, #244]	; (8000cb4 <HAL_UART_MspInit+0x114>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d129      	bne.n	8000c16 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bc2:	4b3d      	ldr	r3, [pc, #244]	; (8000cb8 <HAL_UART_MspInit+0x118>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	4a3c      	ldr	r2, [pc, #240]	; (8000cb8 <HAL_UART_MspInit+0x118>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bce:	4b3a      	ldr	r3, [pc, #232]	; (8000cb8 <HAL_UART_MspInit+0x118>)
 8000bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	61bb      	str	r3, [r7, #24]
 8000bd8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	4b37      	ldr	r3, [pc, #220]	; (8000cb8 <HAL_UART_MspInit+0x118>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	4a36      	ldr	r2, [pc, #216]	; (8000cb8 <HAL_UART_MspInit+0x118>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be6:	4b34      	ldr	r3, [pc, #208]	; (8000cb8 <HAL_UART_MspInit+0x118>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000bf2:	230c      	movs	r3, #12
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000c02:	230c      	movs	r3, #12
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c10:	f000 fdca 	bl	80017a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c14:	e04a      	b.n	8000cac <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART1)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a28      	ldr	r2, [pc, #160]	; (8000cbc <HAL_UART_MspInit+0x11c>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d145      	bne.n	8000cac <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c20:	4b25      	ldr	r3, [pc, #148]	; (8000cb8 <HAL_UART_MspInit+0x118>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	4a24      	ldr	r2, [pc, #144]	; (8000cb8 <HAL_UART_MspInit+0x118>)
 8000c26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c2a:	6613      	str	r3, [r2, #96]	; 0x60
 8000c2c:	4b22      	ldr	r3, [pc, #136]	; (8000cb8 <HAL_UART_MspInit+0x118>)
 8000c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c38:	4b1f      	ldr	r3, [pc, #124]	; (8000cb8 <HAL_UART_MspInit+0x118>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	4a1e      	ldr	r2, [pc, #120]	; (8000cb8 <HAL_UART_MspInit+0x118>)
 8000c3e:	f043 0304 	orr.w	r3, r3, #4
 8000c42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c44:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <HAL_UART_MspInit+0x118>)
 8000c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c48:	f003 0304 	and.w	r3, r3, #4
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c50:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <HAL_UART_MspInit+0x118>)
 8000c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c54:	4a18      	ldr	r2, [pc, #96]	; (8000cb8 <HAL_UART_MspInit+0x118>)
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5c:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <HAL_UART_MspInit+0x118>)
 8000c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c68:	2310      	movs	r3, #16
 8000c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c78:	2307      	movs	r3, #7
 8000c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	4619      	mov	r1, r3
 8000c82:	480f      	ldr	r0, [pc, #60]	; (8000cc0 <HAL_UART_MspInit+0x120>)
 8000c84:	f000 fd90 	bl	80017a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c9a:	2307      	movs	r3, #7
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca8:	f000 fd7e 	bl	80017a8 <HAL_GPIO_Init>
}
 8000cac:	bf00      	nop
 8000cae:	3730      	adds	r7, #48	; 0x30
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40008000 	.word	0x40008000
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	40013800 	.word	0x40013800
 8000cc0:	48000800 	.word	0x48000800

08000cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <HardFault_Handler+0x4>

08000cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <MemManage_Handler+0x4>

08000cde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <BusFault_Handler+0x4>

08000ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <UsageFault_Handler+0x4>

08000cea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d18:	f000 f89c 	bl	8000e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d28:	f000 fef2 	bl	8001b10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d34:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <SystemInit+0x28>)
 8000d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d3a:	4a07      	ldr	r2, [pc, #28]	; (8000d58 <SystemInit+0x28>)
 8000d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <SystemInit+0x28>)
 8000d46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d4a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d5c:	480d      	ldr	r0, [pc, #52]	; (8000d94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d5e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d60:	480d      	ldr	r0, [pc, #52]	; (8000d98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d62:	490e      	ldr	r1, [pc, #56]	; (8000d9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d64:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <LoopForever+0xe>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d68:	e002      	b.n	8000d70 <LoopCopyDataInit>

08000d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6e:	3304      	adds	r3, #4

08000d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d74:	d3f9      	bcc.n	8000d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d76:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d78:	4c0b      	ldr	r4, [pc, #44]	; (8000da8 <LoopForever+0x16>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d7c:	e001      	b.n	8000d82 <LoopFillZerobss>

08000d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d80:	3204      	adds	r2, #4

08000d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d84:	d3fb      	bcc.n	8000d7e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d86:	f7ff ffd3 	bl	8000d30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d8a:	f002 fcc3 	bl	8003714 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d8e:	f7ff fbc3 	bl	8000518 <main>

08000d92 <LoopForever>:

LoopForever:
    b LoopForever
 8000d92:	e7fe      	b.n	8000d92 <LoopForever>
  ldr   r0, =_estack
 8000d94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d9c:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000da0:	080037e4 	.word	0x080037e4
  ldr r2, =_sbss
 8000da4:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000da8:	200002a8 	.word	0x200002a8

08000dac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dac:	e7fe      	b.n	8000dac <ADC1_2_IRQHandler>

08000dae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db8:	2003      	movs	r0, #3
 8000dba:	f000 f95b 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f000 f80e 	bl	8000de0 <HAL_InitTick>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d002      	beq.n	8000dd0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	71fb      	strb	r3, [r7, #7]
 8000dce:	e001      	b.n	8000dd4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dd0:	f7ff fe38 	bl	8000a44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dd4:	79fb      	ldrb	r3, [r7, #7]

}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000de8:	2300      	movs	r3, #0
 8000dea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000dec:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <HAL_InitTick+0x68>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d022      	beq.n	8000e3a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000df4:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <HAL_InitTick+0x6c>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <HAL_InitTick+0x68>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e00:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 f966 	bl	80010da <HAL_SYSTICK_Config>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d10f      	bne.n	8000e34 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b0f      	cmp	r3, #15
 8000e18:	d809      	bhi.n	8000e2e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	6879      	ldr	r1, [r7, #4]
 8000e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e22:	f000 f932 	bl	800108a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e26:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <HAL_InitTick+0x70>)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6013      	str	r3, [r2, #0]
 8000e2c:	e007      	b.n	8000e3e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	73fb      	strb	r3, [r7, #15]
 8000e32:	e004      	b.n	8000e3e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	73fb      	strb	r3, [r7, #15]
 8000e38:	e001      	b.n	8000e3e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	2000004c 	.word	0x2000004c
 8000e4c:	20000044 	.word	0x20000044
 8000e50:	20000048 	.word	0x20000048

08000e54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <HAL_IncTick+0x1c>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <HAL_IncTick+0x20>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4413      	add	r3, r2
 8000e62:	4a03      	ldr	r2, [pc, #12]	; (8000e70 <HAL_IncTick+0x1c>)
 8000e64:	6013      	str	r3, [r2, #0]
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	200002a4 	.word	0x200002a4
 8000e74:	2000004c 	.word	0x2000004c

08000e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <HAL_GetTick+0x14>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	200002a4 	.word	0x200002a4

08000e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e98:	f7ff ffee 	bl	8000e78 <HAL_GetTick>
 8000e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea8:	d004      	beq.n	8000eb4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <HAL_Delay+0x40>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	68fa      	ldr	r2, [r7, #12]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eb4:	bf00      	nop
 8000eb6:	f7ff ffdf 	bl	8000e78 <HAL_GetTick>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	68fa      	ldr	r2, [r7, #12]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d8f7      	bhi.n	8000eb6 <HAL_Delay+0x26>
  {
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	2000004c 	.word	0x2000004c

08000ed4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000efc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f06:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	60d3      	str	r3, [r2, #12]
}
 8000f0c:	bf00      	nop
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <__NVIC_GetPriorityGrouping+0x18>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	0a1b      	lsrs	r3, r3, #8
 8000f26:	f003 0307 	and.w	r3, r3, #7
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	db0b      	blt.n	8000f62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	f003 021f 	and.w	r2, r3, #31
 8000f50:	4907      	ldr	r1, [pc, #28]	; (8000f70 <__NVIC_EnableIRQ+0x38>)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	095b      	lsrs	r3, r3, #5
 8000f58:	2001      	movs	r0, #1
 8000f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000e100 	.word	0xe000e100

08000f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	db0a      	blt.n	8000f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	490c      	ldr	r1, [pc, #48]	; (8000fc0 <__NVIC_SetPriority+0x4c>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	0112      	lsls	r2, r2, #4
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	440b      	add	r3, r1
 8000f98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f9c:	e00a      	b.n	8000fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4908      	ldr	r1, [pc, #32]	; (8000fc4 <__NVIC_SetPriority+0x50>)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	3b04      	subs	r3, #4
 8000fac:	0112      	lsls	r2, r2, #4
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	761a      	strb	r2, [r3, #24]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000e100 	.word	0xe000e100
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	; 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f1c3 0307 	rsb	r3, r3, #7
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	bf28      	it	cs
 8000fe6:	2304      	movcs	r3, #4
 8000fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3304      	adds	r3, #4
 8000fee:	2b06      	cmp	r3, #6
 8000ff0:	d902      	bls.n	8000ff8 <NVIC_EncodePriority+0x30>
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3b03      	subs	r3, #3
 8000ff6:	e000      	b.n	8000ffa <NVIC_EncodePriority+0x32>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43da      	mvns	r2, r3
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	401a      	ands	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001010:	f04f 31ff 	mov.w	r1, #4294967295
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	43d9      	mvns	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	4313      	orrs	r3, r2
         );
}
 8001022:	4618      	mov	r0, r3
 8001024:	3724      	adds	r7, #36	; 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001040:	d301      	bcc.n	8001046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001042:	2301      	movs	r3, #1
 8001044:	e00f      	b.n	8001066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <SysTick_Config+0x40>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104e:	210f      	movs	r1, #15
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	f7ff ff8e 	bl	8000f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <SysTick_Config+0x40>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105e:	4b04      	ldr	r3, [pc, #16]	; (8001070 <SysTick_Config+0x40>)
 8001060:	2207      	movs	r2, #7
 8001062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	e000e010 	.word	0xe000e010

08001074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff29 	bl	8000ed4 <__NVIC_SetPriorityGrouping>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001098:	f7ff ff40 	bl	8000f1c <__NVIC_GetPriorityGrouping>
 800109c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	68b9      	ldr	r1, [r7, #8]
 80010a2:	6978      	ldr	r0, [r7, #20]
 80010a4:	f7ff ff90 	bl	8000fc8 <NVIC_EncodePriority>
 80010a8:	4602      	mov	r2, r0
 80010aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff5f 	bl	8000f74 <__NVIC_SetPriority>
}
 80010b6:	bf00      	nop
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff33 	bl	8000f38 <__NVIC_EnableIRQ>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff ffa4 	bl	8001030 <SysTick_Config>
 80010e8:	4603      	mov	r3, r0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d101      	bne.n	8001106 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e147      	b.n	8001396 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	d106      	bne.n	8001120 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff fcb6 	bl	8000a8c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	699a      	ldr	r2, [r3, #24]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 0210 	bic.w	r2, r2, #16
 800112e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001130:	f7ff fea2 	bl	8000e78 <HAL_GetTick>
 8001134:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001136:	e012      	b.n	800115e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001138:	f7ff fe9e 	bl	8000e78 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b0a      	cmp	r3, #10
 8001144:	d90b      	bls.n	800115e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800114a:	f043 0201 	orr.w	r2, r3, #1
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2203      	movs	r2, #3
 8001156:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e11b      	b.n	8001396 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	f003 0308 	and.w	r3, r3, #8
 8001168:	2b08      	cmp	r3, #8
 800116a:	d0e5      	beq.n	8001138 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	699a      	ldr	r2, [r3, #24]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f042 0201 	orr.w	r2, r2, #1
 800117a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800117c:	f7ff fe7c 	bl	8000e78 <HAL_GetTick>
 8001180:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001182:	e012      	b.n	80011aa <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001184:	f7ff fe78 	bl	8000e78 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b0a      	cmp	r3, #10
 8001190:	d90b      	bls.n	80011aa <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001196:	f043 0201 	orr.w	r2, r3, #1
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2203      	movs	r2, #3
 80011a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e0f5      	b.n	8001396 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0e5      	beq.n	8001184 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	699a      	ldr	r2, [r3, #24]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f042 0202 	orr.w	r2, r2, #2
 80011c6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a74      	ldr	r2, [pc, #464]	; (80013a0 <HAL_FDCAN_Init+0x2ac>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d103      	bne.n	80011da <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80011d2:	4a74      	ldr	r2, [pc, #464]	; (80013a4 <HAL_FDCAN_Init+0x2b0>)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	7c1b      	ldrb	r3, [r3, #16]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d108      	bne.n	80011f4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	699a      	ldr	r2, [r3, #24]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011f0:	619a      	str	r2, [r3, #24]
 80011f2:	e007      	b.n	8001204 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	699a      	ldr	r2, [r3, #24]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001202:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	7c5b      	ldrb	r3, [r3, #17]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d108      	bne.n	800121e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	699a      	ldr	r2, [r3, #24]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800121a:	619a      	str	r2, [r3, #24]
 800121c:	e007      	b.n	800122e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	699a      	ldr	r2, [r3, #24]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800122c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	7c9b      	ldrb	r3, [r3, #18]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d108      	bne.n	8001248 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	699a      	ldr	r2, [r3, #24]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001244:	619a      	str	r2, [r3, #24]
 8001246:	e007      	b.n	8001258 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	699a      	ldr	r2, [r3, #24]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001256:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	430a      	orrs	r2, r1
 800126c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	699a      	ldr	r2, [r3, #24]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800127c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	691a      	ldr	r2, [r3, #16]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0210 	bic.w	r2, r2, #16
 800128c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d108      	bne.n	80012a8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	699a      	ldr	r2, [r3, #24]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f042 0204 	orr.w	r2, r2, #4
 80012a4:	619a      	str	r2, [r3, #24]
 80012a6:	e02c      	b.n	8001302 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d028      	beq.n	8001302 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d01c      	beq.n	80012f2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	699a      	ldr	r2, [r3, #24]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012c6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	691a      	ldr	r2, [r3, #16]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f042 0210 	orr.w	r2, r2, #16
 80012d6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	2b03      	cmp	r3, #3
 80012de:	d110      	bne.n	8001302 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	699a      	ldr	r2, [r3, #24]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f042 0220 	orr.w	r2, r2, #32
 80012ee:	619a      	str	r2, [r3, #24]
 80012f0:	e007      	b.n	8001302 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	699a      	ldr	r2, [r3, #24]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f042 0220 	orr.w	r2, r2, #32
 8001300:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	3b01      	subs	r3, #1
 8001308:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	3b01      	subs	r3, #1
 8001310:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001312:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800131a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	3b01      	subs	r3, #1
 8001324:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800132a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800132c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001336:	d115      	bne.n	8001364 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001342:	3b01      	subs	r3, #1
 8001344:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001346:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134c:	3b01      	subs	r3, #1
 800134e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001350:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001358:	3b01      	subs	r3, #1
 800135a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001360:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001362:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	430a      	orrs	r2, r1
 8001376:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 f92c 	bl	80015d8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40006400 	.word	0x40006400
 80013a4:	40006500 	.word	0x40006500

080013a8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b087      	sub	sp, #28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80013b8:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80013ba:	7dfb      	ldrb	r3, [r7, #23]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d002      	beq.n	80013c6 <HAL_FDCAN_ConfigFilter+0x1e>
 80013c0:	7dfb      	ldrb	r3, [r7, #23]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d13d      	bne.n	8001442 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d119      	bne.n	8001402 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80013da:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80013e2:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	e01d      	b.n	800143e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	075a      	lsls	r2, r3, #29
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	4313      	orrs	r3, r2
 800140e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	079a      	lsls	r2, r3, #30
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	4313      	orrs	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	4413      	add	r3, r2
 800142a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	3304      	adds	r3, #4
 8001436:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	e006      	b.n	8001450 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001446:	f043 0202 	orr.w	r2, r3, #2
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
  }
}
 8001450:	4618      	mov	r0, r3
 8001452:	371c      	adds	r7, #28
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
 8001468:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b01      	cmp	r3, #1
 8001474:	d116      	bne.n	80014a4 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800147e:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	011a      	lsls	r2, r3, #4
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	431a      	orrs	r2, r3
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	431a      	orrs	r2, r3
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	431a      	orrs	r2, r3
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	e006      	b.n	80014b2 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a8:	f043 0204 	orr.w	r2, r3, #4
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
  }
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d109      	bne.n	80014e6 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68da      	ldr	r2, [r3, #12]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80014e0:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	e006      	b.n	80014f4 <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ea:	f043 0204 	orr.w	r2, r3, #4
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
  }
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b01      	cmp	r3, #1
 8001512:	d110      	bne.n	8001536 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2202      	movs	r2, #2
 8001518:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	699a      	ldr	r2, [r3, #24]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0201 	bic.w	r2, r2, #1
 800152a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	e006      	b.n	8001544 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800153a:	f043 0204 	orr.w	r2, r3, #4
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
  }
}
 8001544:	4618      	mov	r0, r3
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d12c      	bne.n	80015c2 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d007      	beq.n	8001588 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e023      	b.n	80015d0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001590:	0c1b      	lsrs	r3, r3, #16
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f000 f886 	bl	80016b0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2101      	movs	r1, #1
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	fa01 f202 	lsl.w	r2, r1, r2
 80015b0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80015b4:	2201      	movs	r2, #1
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	409a      	lsls	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	e006      	b.n	80015d0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c6:	f043 0208 	orr.w	r2, r3, #8
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
  }
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80015e0:	4b30      	ldr	r3, [pc, #192]	; (80016a4 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80015e2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a2f      	ldr	r2, [pc, #188]	; (80016a8 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d103      	bne.n	80015f6 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80015f4:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a2c      	ldr	r2, [pc, #176]	; (80016ac <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d103      	bne.n	8001608 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8001606:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001616:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800161e:	041a      	lsls	r2, r3, #16
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	430a      	orrs	r2, r1
 8001626:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800163c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001644:	061a      	lsls	r2, r3, #24
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	430a      	orrs	r2, r1
 800164c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	e005      	b.n	800168a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	3304      	adds	r3, #4
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	429a      	cmp	r2, r3
 8001694:	d3f3      	bcc.n	800167e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8001696:	bf00      	nop
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	4000a400 	.word	0x4000a400
 80016a8:	40006800 	.word	0x40006800
 80016ac:	40006c00 	.word	0x40006c00

080016b0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	; 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10a      	bne.n	80016dc <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80016ce:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61fb      	str	r3, [r7, #28]
 80016da:	e00a      	b.n	80016f2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80016e4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80016ea:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80016ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80016f0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80016fc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001702:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001708:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800170e:	4313      	orrs	r3, r2
 8001710:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	4613      	mov	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	4413      	add	r3, r2
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	440b      	add	r3, r1
 8001722:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	69fa      	ldr	r2, [r7, #28]
 8001728:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	3304      	adds	r3, #4
 800172e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	3304      	adds	r3, #4
 800173a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	e020      	b.n	8001784 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	3303      	adds	r3, #3
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	3302      	adds	r3, #2
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	440b      	add	r3, r1
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800175a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	3301      	adds	r3, #1
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	440b      	add	r3, r1
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001768:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	440a      	add	r2, r1
 8001770:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001772:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	3304      	adds	r3, #4
 800177c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	3304      	adds	r3, #4
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	0c1b      	lsrs	r3, r3, #16
 800178a:	4a06      	ldr	r2, [pc, #24]	; (80017a4 <FDCAN_CopyMessageToRAM+0xf4>)
 800178c:	5cd3      	ldrb	r3, [r2, r3]
 800178e:	461a      	mov	r2, r3
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	4293      	cmp	r3, r2
 8001794:	d3d5      	bcc.n	8001742 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8001796:	bf00      	nop
 8001798:	3724      	adds	r7, #36	; 0x24
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	080037ac 	.word	0x080037ac

080017a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b087      	sub	sp, #28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017b6:	e15a      	b.n	8001a6e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	2101      	movs	r1, #1
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	fa01 f303 	lsl.w	r3, r1, r3
 80017c4:	4013      	ands	r3, r2
 80017c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 814c 	beq.w	8001a68 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d00b      	beq.n	80017f0 <HAL_GPIO_Init+0x48>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d007      	beq.n	80017f0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017e4:	2b11      	cmp	r3, #17
 80017e6:	d003      	beq.n	80017f0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b12      	cmp	r3, #18
 80017ee:	d130      	bne.n	8001852 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	2203      	movs	r2, #3
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	68da      	ldr	r2, [r3, #12]
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4313      	orrs	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001826:	2201      	movs	r2, #1
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43db      	mvns	r3, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4013      	ands	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	091b      	lsrs	r3, r3, #4
 800183c:	f003 0201 	and.w	r2, r3, #1
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	2203      	movs	r2, #3
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4013      	ands	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_Init+0xea>
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b12      	cmp	r3, #18
 8001890:	d123      	bne.n	80018da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	08da      	lsrs	r2, r3, #3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3208      	adds	r2, #8
 800189a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800189e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	220f      	movs	r2, #15
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4013      	ands	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	691a      	ldr	r2, [r3, #16]
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	08da      	lsrs	r2, r3, #3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3208      	adds	r2, #8
 80018d4:	6939      	ldr	r1, [r7, #16]
 80018d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	2203      	movs	r2, #3
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4013      	ands	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 0203 	and.w	r2, r3, #3
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 80a6 	beq.w	8001a68 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191c:	4b5b      	ldr	r3, [pc, #364]	; (8001a8c <HAL_GPIO_Init+0x2e4>)
 800191e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001920:	4a5a      	ldr	r2, [pc, #360]	; (8001a8c <HAL_GPIO_Init+0x2e4>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6613      	str	r3, [r2, #96]	; 0x60
 8001928:	4b58      	ldr	r3, [pc, #352]	; (8001a8c <HAL_GPIO_Init+0x2e4>)
 800192a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001934:	4a56      	ldr	r2, [pc, #344]	; (8001a90 <HAL_GPIO_Init+0x2e8>)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	089b      	lsrs	r3, r3, #2
 800193a:	3302      	adds	r3, #2
 800193c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001940:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	220f      	movs	r2, #15
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4013      	ands	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800195e:	d01f      	beq.n	80019a0 <HAL_GPIO_Init+0x1f8>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a4c      	ldr	r2, [pc, #304]	; (8001a94 <HAL_GPIO_Init+0x2ec>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d019      	beq.n	800199c <HAL_GPIO_Init+0x1f4>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a4b      	ldr	r2, [pc, #300]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d013      	beq.n	8001998 <HAL_GPIO_Init+0x1f0>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a4a      	ldr	r2, [pc, #296]	; (8001a9c <HAL_GPIO_Init+0x2f4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d00d      	beq.n	8001994 <HAL_GPIO_Init+0x1ec>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a49      	ldr	r2, [pc, #292]	; (8001aa0 <HAL_GPIO_Init+0x2f8>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d007      	beq.n	8001990 <HAL_GPIO_Init+0x1e8>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a48      	ldr	r2, [pc, #288]	; (8001aa4 <HAL_GPIO_Init+0x2fc>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d101      	bne.n	800198c <HAL_GPIO_Init+0x1e4>
 8001988:	2305      	movs	r3, #5
 800198a:	e00a      	b.n	80019a2 <HAL_GPIO_Init+0x1fa>
 800198c:	2306      	movs	r3, #6
 800198e:	e008      	b.n	80019a2 <HAL_GPIO_Init+0x1fa>
 8001990:	2304      	movs	r3, #4
 8001992:	e006      	b.n	80019a2 <HAL_GPIO_Init+0x1fa>
 8001994:	2303      	movs	r3, #3
 8001996:	e004      	b.n	80019a2 <HAL_GPIO_Init+0x1fa>
 8001998:	2302      	movs	r3, #2
 800199a:	e002      	b.n	80019a2 <HAL_GPIO_Init+0x1fa>
 800199c:	2301      	movs	r3, #1
 800199e:	e000      	b.n	80019a2 <HAL_GPIO_Init+0x1fa>
 80019a0:	2300      	movs	r3, #0
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	f002 0203 	and.w	r2, r2, #3
 80019a8:	0092      	lsls	r2, r2, #2
 80019aa:	4093      	lsls	r3, r2
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019b2:	4937      	ldr	r1, [pc, #220]	; (8001a90 <HAL_GPIO_Init+0x2e8>)
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	089b      	lsrs	r3, r3, #2
 80019b8:	3302      	adds	r3, #2
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019c0:	4b39      	ldr	r3, [pc, #228]	; (8001aa8 <HAL_GPIO_Init+0x300>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019e4:	4a30      	ldr	r2, [pc, #192]	; (8001aa8 <HAL_GPIO_Init+0x300>)
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80019ea:	4b2f      	ldr	r3, [pc, #188]	; (8001aa8 <HAL_GPIO_Init+0x300>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4013      	ands	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a0e:	4a26      	ldr	r2, [pc, #152]	; (8001aa8 <HAL_GPIO_Init+0x300>)
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a14:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <HAL_GPIO_Init+0x300>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4013      	ands	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a38:	4a1b      	ldr	r2, [pc, #108]	; (8001aa8 <HAL_GPIO_Init+0x300>)
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a3e:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <HAL_GPIO_Init+0x300>)
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	43db      	mvns	r3, r3
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a62:	4a11      	ldr	r2, [pc, #68]	; (8001aa8 <HAL_GPIO_Init+0x300>)
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	fa22 f303 	lsr.w	r3, r2, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f47f ae9d 	bne.w	80017b8 <HAL_GPIO_Init+0x10>
  }
}
 8001a7e:	bf00      	nop
 8001a80:	371c      	adds	r7, #28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40010000 	.word	0x40010000
 8001a94:	48000400 	.word	0x48000400
 8001a98:	48000800 	.word	0x48000800
 8001a9c:	48000c00 	.word	0x48000c00
 8001aa0:	48001000 	.word	0x48001000
 8001aa4:	48001400 	.word	0x48001400
 8001aa8:	40010400 	.word	0x40010400

08001aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	807b      	strh	r3, [r7, #2]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001abc:	787b      	ldrb	r3, [r7, #1]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ac2:	887a      	ldrh	r2, [r7, #2]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ac8:	e002      	b.n	8001ad0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001aca:	887a      	ldrh	r2, [r7, #2]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001aee:	887a      	ldrh	r2, [r7, #2]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4013      	ands	r3, r2
 8001af4:	041a      	lsls	r2, r3, #16
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	43d9      	mvns	r1, r3
 8001afa:	887b      	ldrh	r3, [r7, #2]
 8001afc:	400b      	ands	r3, r1
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	619a      	str	r2, [r3, #24]
}
 8001b04:	bf00      	nop
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b1a:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b1c:	695a      	ldr	r2, [r3, #20]
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	4013      	ands	r3, r2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d006      	beq.n	8001b34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b26:	4a05      	ldr	r2, [pc, #20]	; (8001b3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b28:	88fb      	ldrh	r3, [r7, #6]
 8001b2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b2c:	88fb      	ldrh	r3, [r7, #6]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 f806 	bl	8001b40 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40010400 	.word	0x40010400

08001b40 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d141      	bne.n	8001bea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b66:	4b4b      	ldr	r3, [pc, #300]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b72:	d131      	bne.n	8001bd8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b74:	4b47      	ldr	r3, [pc, #284]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b7a:	4a46      	ldr	r2, [pc, #280]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b84:	4b43      	ldr	r3, [pc, #268]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b8c:	4a41      	ldr	r2, [pc, #260]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b94:	4b40      	ldr	r3, [pc, #256]	; (8001c98 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2232      	movs	r2, #50	; 0x32
 8001b9a:	fb02 f303 	mul.w	r3, r2, r3
 8001b9e:	4a3f      	ldr	r2, [pc, #252]	; (8001c9c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba4:	0c9b      	lsrs	r3, r3, #18
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001baa:	e002      	b.n	8001bb2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bb2:	4b38      	ldr	r3, [pc, #224]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bbe:	d102      	bne.n	8001bc6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f2      	bne.n	8001bac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bc6:	4b33      	ldr	r3, [pc, #204]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bd2:	d158      	bne.n	8001c86 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e057      	b.n	8001c88 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bd8:	4b2e      	ldr	r3, [pc, #184]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bde:	4a2d      	ldr	r2, [pc, #180]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001be4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001be8:	e04d      	b.n	8001c86 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bf0:	d141      	bne.n	8001c76 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bf2:	4b28      	ldr	r3, [pc, #160]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bfe:	d131      	bne.n	8001c64 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c00:	4b24      	ldr	r3, [pc, #144]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c06:	4a23      	ldr	r2, [pc, #140]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c10:	4b20      	ldr	r3, [pc, #128]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c18:	4a1e      	ldr	r2, [pc, #120]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c20:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2232      	movs	r2, #50	; 0x32
 8001c26:	fb02 f303 	mul.w	r3, r2, r3
 8001c2a:	4a1c      	ldr	r2, [pc, #112]	; (8001c9c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c30:	0c9b      	lsrs	r3, r3, #18
 8001c32:	3301      	adds	r3, #1
 8001c34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c36:	e002      	b.n	8001c3e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c4a:	d102      	bne.n	8001c52 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f2      	bne.n	8001c38 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c5e:	d112      	bne.n	8001c86 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e011      	b.n	8001c88 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c74:	e007      	b.n	8001c86 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c76:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c7e:	4a05      	ldr	r2, [pc, #20]	; (8001c94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c84:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	40007000 	.word	0x40007000
 8001c98:	20000044 	.word	0x20000044
 8001c9c:	431bde83 	.word	0x431bde83

08001ca0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	4a04      	ldr	r2, [pc, #16]	; (8001cbc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001caa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cae:	6093      	str	r3, [r2, #8]
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	40007000 	.word	0x40007000

08001cc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e308      	b.n	80022e4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d075      	beq.n	8001dca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cde:	4ba3      	ldr	r3, [pc, #652]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce8:	4ba0      	ldr	r3, [pc, #640]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	2b0c      	cmp	r3, #12
 8001cf6:	d102      	bne.n	8001cfe <HAL_RCC_OscConfig+0x3e>
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	2b03      	cmp	r3, #3
 8001cfc:	d002      	beq.n	8001d04 <HAL_RCC_OscConfig+0x44>
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d10b      	bne.n	8001d1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d04:	4b99      	ldr	r3, [pc, #612]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d05b      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x108>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d157      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e2e3      	b.n	80022e4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d24:	d106      	bne.n	8001d34 <HAL_RCC_OscConfig+0x74>
 8001d26:	4b91      	ldr	r3, [pc, #580]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a90      	ldr	r2, [pc, #576]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	e01d      	b.n	8001d70 <HAL_RCC_OscConfig+0xb0>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d3c:	d10c      	bne.n	8001d58 <HAL_RCC_OscConfig+0x98>
 8001d3e:	4b8b      	ldr	r3, [pc, #556]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a8a      	ldr	r2, [pc, #552]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	4b88      	ldr	r3, [pc, #544]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a87      	ldr	r2, [pc, #540]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	e00b      	b.n	8001d70 <HAL_RCC_OscConfig+0xb0>
 8001d58:	4b84      	ldr	r3, [pc, #528]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a83      	ldr	r2, [pc, #524]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	4b81      	ldr	r3, [pc, #516]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a80      	ldr	r2, [pc, #512]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d013      	beq.n	8001da0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d78:	f7ff f87e 	bl	8000e78 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d80:	f7ff f87a 	bl	8000e78 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b64      	cmp	r3, #100	; 0x64
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e2a8      	b.n	80022e4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d92:	4b76      	ldr	r3, [pc, #472]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f0      	beq.n	8001d80 <HAL_RCC_OscConfig+0xc0>
 8001d9e:	e014      	b.n	8001dca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7ff f86a 	bl	8000e78 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da8:	f7ff f866 	bl	8000e78 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b64      	cmp	r3, #100	; 0x64
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e294      	b.n	80022e4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dba:	4b6c      	ldr	r3, [pc, #432]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0xe8>
 8001dc6:	e000      	b.n	8001dca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d075      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dd6:	4b65      	ldr	r3, [pc, #404]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001de0:	4b62      	ldr	r3, [pc, #392]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	2b0c      	cmp	r3, #12
 8001dee:	d102      	bne.n	8001df6 <HAL_RCC_OscConfig+0x136>
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d002      	beq.n	8001dfc <HAL_RCC_OscConfig+0x13c>
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	2b04      	cmp	r3, #4
 8001dfa:	d11f      	bne.n	8001e3c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dfc:	4b5b      	ldr	r3, [pc, #364]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d005      	beq.n	8001e14 <HAL_RCC_OscConfig+0x154>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e267      	b.n	80022e4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e14:	4b55      	ldr	r3, [pc, #340]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	061b      	lsls	r3, r3, #24
 8001e22:	4952      	ldr	r1, [pc, #328]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e28:	4b51      	ldr	r3, [pc, #324]	; (8001f70 <HAL_RCC_OscConfig+0x2b0>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe ffd7 	bl	8000de0 <HAL_InitTick>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d043      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e253      	b.n	80022e4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d023      	beq.n	8001e8c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e44:	4b49      	ldr	r3, [pc, #292]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a48      	ldr	r2, [pc, #288]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001e4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e50:	f7ff f812 	bl	8000e78 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e58:	f7ff f80e 	bl	8000e78 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e23c      	b.n	80022e4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e6a:	4b40      	ldr	r3, [pc, #256]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0f0      	beq.n	8001e58 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e76:	4b3d      	ldr	r3, [pc, #244]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	061b      	lsls	r3, r3, #24
 8001e84:	4939      	ldr	r1, [pc, #228]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	604b      	str	r3, [r1, #4]
 8001e8a:	e01a      	b.n	8001ec2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e8c:	4b37      	ldr	r3, [pc, #220]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a36      	ldr	r2, [pc, #216]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001e92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e98:	f7fe ffee 	bl	8000e78 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea0:	f7fe ffea 	bl	8000e78 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e218      	b.n	80022e4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eb2:	4b2e      	ldr	r3, [pc, #184]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x1e0>
 8001ebe:	e000      	b.n	8001ec2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ec0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d03c      	beq.n	8001f48 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d01c      	beq.n	8001f10 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ed6:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001edc:	4a23      	ldr	r2, [pc, #140]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee6:	f7fe ffc7 	bl	8000e78 <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eee:	f7fe ffc3 	bl	8000e78 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e1f1      	b.n	80022e4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f00:	4b1a      	ldr	r3, [pc, #104]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0ef      	beq.n	8001eee <HAL_RCC_OscConfig+0x22e>
 8001f0e:	e01b      	b.n	8001f48 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f10:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f16:	4a15      	ldr	r2, [pc, #84]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001f18:	f023 0301 	bic.w	r3, r3, #1
 8001f1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f20:	f7fe ffaa 	bl	8000e78 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f28:	f7fe ffa6 	bl	8000e78 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e1d4      	b.n	80022e4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1ef      	bne.n	8001f28 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 80ab 	beq.w	80020ac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f56:	2300      	movs	r3, #0
 8001f58:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f5a:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <HAL_RCC_OscConfig+0x2ac>)
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d106      	bne.n	8001f74 <HAL_RCC_OscConfig+0x2b4>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e005      	b.n	8001f76 <HAL_RCC_OscConfig+0x2b6>
 8001f6a:	bf00      	nop
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	20000048 	.word	0x20000048
 8001f74:	2300      	movs	r3, #0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00d      	beq.n	8001f96 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f7a:	4baf      	ldr	r3, [pc, #700]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7e:	4aae      	ldr	r2, [pc, #696]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 8001f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f84:	6593      	str	r3, [r2, #88]	; 0x58
 8001f86:	4bac      	ldr	r3, [pc, #688]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 8001f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f92:	2301      	movs	r3, #1
 8001f94:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f96:	4ba9      	ldr	r3, [pc, #676]	; (800223c <HAL_RCC_OscConfig+0x57c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d118      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fa2:	4ba6      	ldr	r3, [pc, #664]	; (800223c <HAL_RCC_OscConfig+0x57c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4aa5      	ldr	r2, [pc, #660]	; (800223c <HAL_RCC_OscConfig+0x57c>)
 8001fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fae:	f7fe ff63 	bl	8000e78 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb6:	f7fe ff5f 	bl	8000e78 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e18d      	b.n	80022e4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc8:	4b9c      	ldr	r3, [pc, #624]	; (800223c <HAL_RCC_OscConfig+0x57c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0f0      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d108      	bne.n	8001fee <HAL_RCC_OscConfig+0x32e>
 8001fdc:	4b96      	ldr	r3, [pc, #600]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 8001fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe2:	4a95      	ldr	r2, [pc, #596]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fec:	e024      	b.n	8002038 <HAL_RCC_OscConfig+0x378>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b05      	cmp	r3, #5
 8001ff4:	d110      	bne.n	8002018 <HAL_RCC_OscConfig+0x358>
 8001ff6:	4b90      	ldr	r3, [pc, #576]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 8001ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffc:	4a8e      	ldr	r2, [pc, #568]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 8001ffe:	f043 0304 	orr.w	r3, r3, #4
 8002002:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002006:	4b8c      	ldr	r3, [pc, #560]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 8002008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200c:	4a8a      	ldr	r2, [pc, #552]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002016:	e00f      	b.n	8002038 <HAL_RCC_OscConfig+0x378>
 8002018:	4b87      	ldr	r3, [pc, #540]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 800201a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201e:	4a86      	ldr	r2, [pc, #536]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 8002020:	f023 0301 	bic.w	r3, r3, #1
 8002024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002028:	4b83      	ldr	r3, [pc, #524]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 800202a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202e:	4a82      	ldr	r2, [pc, #520]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 8002030:	f023 0304 	bic.w	r3, r3, #4
 8002034:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d016      	beq.n	800206e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002040:	f7fe ff1a 	bl	8000e78 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002046:	e00a      	b.n	800205e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002048:	f7fe ff16 	bl	8000e78 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	f241 3288 	movw	r2, #5000	; 0x1388
 8002056:	4293      	cmp	r3, r2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e142      	b.n	80022e4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800205e:	4b76      	ldr	r3, [pc, #472]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 8002060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0ed      	beq.n	8002048 <HAL_RCC_OscConfig+0x388>
 800206c:	e015      	b.n	800209a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206e:	f7fe ff03 	bl	8000e78 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002074:	e00a      	b.n	800208c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002076:	f7fe feff 	bl	8000e78 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	f241 3288 	movw	r2, #5000	; 0x1388
 8002084:	4293      	cmp	r3, r2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e12b      	b.n	80022e4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800208c:	4b6a      	ldr	r3, [pc, #424]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 800208e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1ed      	bne.n	8002076 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800209a:	7ffb      	ldrb	r3, [r7, #31]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d105      	bne.n	80020ac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a0:	4b65      	ldr	r3, [pc, #404]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 80020a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a4:	4a64      	ldr	r2, [pc, #400]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 80020a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0320 	and.w	r3, r3, #32
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d03c      	beq.n	8002132 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d01c      	beq.n	80020fa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020c0:	4b5d      	ldr	r3, [pc, #372]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 80020c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020c6:	4a5c      	ldr	r2, [pc, #368]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d0:	f7fe fed2 	bl	8000e78 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020d8:	f7fe fece 	bl	8000e78 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e0fc      	b.n	80022e4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020ea:	4b53      	ldr	r3, [pc, #332]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 80020ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0ef      	beq.n	80020d8 <HAL_RCC_OscConfig+0x418>
 80020f8:	e01b      	b.n	8002132 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020fa:	4b4f      	ldr	r3, [pc, #316]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 80020fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002100:	4a4d      	ldr	r2, [pc, #308]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 8002102:	f023 0301 	bic.w	r3, r3, #1
 8002106:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210a:	f7fe feb5 	bl	8000e78 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002112:	f7fe feb1 	bl	8000e78 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e0df      	b.n	80022e4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002124:	4b44      	ldr	r3, [pc, #272]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 8002126:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1ef      	bne.n	8002112 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 80d3 	beq.w	80022e2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800213c:	4b3e      	ldr	r3, [pc, #248]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 030c 	and.w	r3, r3, #12
 8002144:	2b0c      	cmp	r3, #12
 8002146:	f000 808d 	beq.w	8002264 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d15a      	bne.n	8002208 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002152:	4b39      	ldr	r3, [pc, #228]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a38      	ldr	r2, [pc, #224]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 8002158:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800215c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215e:	f7fe fe8b 	bl	8000e78 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002166:	f7fe fe87 	bl	8000e78 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e0b5      	b.n	80022e4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002178:	4b2f      	ldr	r3, [pc, #188]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1f0      	bne.n	8002166 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002184:	4b2c      	ldr	r3, [pc, #176]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <HAL_RCC_OscConfig+0x580>)
 800218a:	4013      	ands	r3, r2
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6a11      	ldr	r1, [r2, #32]
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002194:	3a01      	subs	r2, #1
 8002196:	0112      	lsls	r2, r2, #4
 8002198:	4311      	orrs	r1, r2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800219e:	0212      	lsls	r2, r2, #8
 80021a0:	4311      	orrs	r1, r2
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021a6:	0852      	lsrs	r2, r2, #1
 80021a8:	3a01      	subs	r2, #1
 80021aa:	0552      	lsls	r2, r2, #21
 80021ac:	4311      	orrs	r1, r2
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021b2:	0852      	lsrs	r2, r2, #1
 80021b4:	3a01      	subs	r2, #1
 80021b6:	0652      	lsls	r2, r2, #25
 80021b8:	4311      	orrs	r1, r2
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80021be:	06d2      	lsls	r2, r2, #27
 80021c0:	430a      	orrs	r2, r1
 80021c2:	491d      	ldr	r1, [pc, #116]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021c8:	4b1b      	ldr	r3, [pc, #108]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a1a      	ldr	r2, [pc, #104]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 80021ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021d2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021d4:	4b18      	ldr	r3, [pc, #96]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	4a17      	ldr	r2, [pc, #92]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 80021da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7fe fe4a 	bl	8000e78 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e8:	f7fe fe46 	bl	8000e78 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e074      	b.n	80022e4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021fa:	4b0f      	ldr	r3, [pc, #60]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCC_OscConfig+0x528>
 8002206:	e06c      	b.n	80022e2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002208:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a0a      	ldr	r2, [pc, #40]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 800220e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002212:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002214:	4b08      	ldr	r3, [pc, #32]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	4a07      	ldr	r2, [pc, #28]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 800221a:	f023 0303 	bic.w	r3, r3, #3
 800221e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002220:	4b05      	ldr	r3, [pc, #20]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	4a04      	ldr	r2, [pc, #16]	; (8002238 <HAL_RCC_OscConfig+0x578>)
 8002226:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800222a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800222e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002230:	f7fe fe22 	bl	8000e78 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002236:	e00e      	b.n	8002256 <HAL_RCC_OscConfig+0x596>
 8002238:	40021000 	.word	0x40021000
 800223c:	40007000 	.word	0x40007000
 8002240:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002244:	f7fe fe18 	bl	8000e78 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e046      	b.n	80022e4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002256:	4b25      	ldr	r3, [pc, #148]	; (80022ec <HAL_RCC_OscConfig+0x62c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f0      	bne.n	8002244 <HAL_RCC_OscConfig+0x584>
 8002262:	e03e      	b.n	80022e2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d101      	bne.n	8002270 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e039      	b.n	80022e4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002270:	4b1e      	ldr	r3, [pc, #120]	; (80022ec <HAL_RCC_OscConfig+0x62c>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f003 0203 	and.w	r2, r3, #3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a1b      	ldr	r3, [r3, #32]
 8002280:	429a      	cmp	r2, r3
 8002282:	d12c      	bne.n	80022de <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228e:	3b01      	subs	r3, #1
 8002290:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002292:	429a      	cmp	r2, r3
 8002294:	d123      	bne.n	80022de <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d11b      	bne.n	80022de <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d113      	bne.n	80022de <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	085b      	lsrs	r3, r3, #1
 80022c2:	3b01      	subs	r3, #1
 80022c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d109      	bne.n	80022de <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d4:	085b      	lsrs	r3, r3, #1
 80022d6:	3b01      	subs	r3, #1
 80022d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022da:	429a      	cmp	r2, r3
 80022dc:	d001      	beq.n	80022e2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3720      	adds	r7, #32
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40021000 	.word	0x40021000

080022f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e11e      	b.n	8002546 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002308:	4b91      	ldr	r3, [pc, #580]	; (8002550 <HAL_RCC_ClockConfig+0x260>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 030f 	and.w	r3, r3, #15
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	d910      	bls.n	8002338 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002316:	4b8e      	ldr	r3, [pc, #568]	; (8002550 <HAL_RCC_ClockConfig+0x260>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f023 020f 	bic.w	r2, r3, #15
 800231e:	498c      	ldr	r1, [pc, #560]	; (8002550 <HAL_RCC_ClockConfig+0x260>)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	4313      	orrs	r3, r2
 8002324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002326:	4b8a      	ldr	r3, [pc, #552]	; (8002550 <HAL_RCC_ClockConfig+0x260>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	d001      	beq.n	8002338 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e106      	b.n	8002546 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b00      	cmp	r3, #0
 8002342:	d073      	beq.n	800242c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d129      	bne.n	80023a0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800234c:	4b81      	ldr	r3, [pc, #516]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e0f4      	b.n	8002546 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800235c:	f000 f99e 	bl	800269c <RCC_GetSysClockFreqFromPLLSource>
 8002360:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4a7c      	ldr	r2, [pc, #496]	; (8002558 <HAL_RCC_ClockConfig+0x268>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d93f      	bls.n	80023ea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800236a:	4b7a      	ldr	r3, [pc, #488]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d009      	beq.n	800238a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800237e:	2b00      	cmp	r3, #0
 8002380:	d033      	beq.n	80023ea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002386:	2b00      	cmp	r3, #0
 8002388:	d12f      	bne.n	80023ea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800238a:	4b72      	ldr	r3, [pc, #456]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002392:	4a70      	ldr	r2, [pc, #448]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 8002394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002398:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800239a:	2380      	movs	r3, #128	; 0x80
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	e024      	b.n	80023ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d107      	bne.n	80023b8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023a8:	4b6a      	ldr	r3, [pc, #424]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d109      	bne.n	80023c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0c6      	b.n	8002546 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b8:	4b66      	ldr	r3, [pc, #408]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0be      	b.n	8002546 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80023c8:	f000 f8ce 	bl	8002568 <HAL_RCC_GetSysClockFreq>
 80023cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4a61      	ldr	r2, [pc, #388]	; (8002558 <HAL_RCC_ClockConfig+0x268>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d909      	bls.n	80023ea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023d6:	4b5f      	ldr	r3, [pc, #380]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023de:	4a5d      	ldr	r2, [pc, #372]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 80023e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80023e6:	2380      	movs	r3, #128	; 0x80
 80023e8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023ea:	4b5a      	ldr	r3, [pc, #360]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f023 0203 	bic.w	r2, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	4957      	ldr	r1, [pc, #348]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023fc:	f7fe fd3c 	bl	8000e78 <HAL_GetTick>
 8002400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002402:	e00a      	b.n	800241a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002404:	f7fe fd38 	bl	8000e78 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002412:	4293      	cmp	r3, r2
 8002414:	d901      	bls.n	800241a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e095      	b.n	8002546 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241a:	4b4e      	ldr	r3, [pc, #312]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 020c 	and.w	r2, r3, #12
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	429a      	cmp	r2, r3
 800242a:	d1eb      	bne.n	8002404 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d023      	beq.n	8002480 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002444:	4b43      	ldr	r3, [pc, #268]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	4a42      	ldr	r2, [pc, #264]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 800244a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800244e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0308 	and.w	r3, r3, #8
 8002458:	2b00      	cmp	r3, #0
 800245a:	d007      	beq.n	800246c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800245c:	4b3d      	ldr	r3, [pc, #244]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002464:	4a3b      	ldr	r2, [pc, #236]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 8002466:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800246a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800246c:	4b39      	ldr	r3, [pc, #228]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	4936      	ldr	r1, [pc, #216]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 800247a:	4313      	orrs	r3, r2
 800247c:	608b      	str	r3, [r1, #8]
 800247e:	e008      	b.n	8002492 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	2b80      	cmp	r3, #128	; 0x80
 8002484:	d105      	bne.n	8002492 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002486:	4b33      	ldr	r3, [pc, #204]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	4a32      	ldr	r2, [pc, #200]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 800248c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002490:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002492:	4b2f      	ldr	r3, [pc, #188]	; (8002550 <HAL_RCC_ClockConfig+0x260>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d21d      	bcs.n	80024dc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a0:	4b2b      	ldr	r3, [pc, #172]	; (8002550 <HAL_RCC_ClockConfig+0x260>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f023 020f 	bic.w	r2, r3, #15
 80024a8:	4929      	ldr	r1, [pc, #164]	; (8002550 <HAL_RCC_ClockConfig+0x260>)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024b0:	f7fe fce2 	bl	8000e78 <HAL_GetTick>
 80024b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b6:	e00a      	b.n	80024ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b8:	f7fe fcde 	bl	8000e78 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e03b      	b.n	8002546 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ce:	4b20      	ldr	r3, [pc, #128]	; (8002550 <HAL_RCC_ClockConfig+0x260>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d1ed      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d008      	beq.n	80024fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e8:	4b1a      	ldr	r3, [pc, #104]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	4917      	ldr	r1, [pc, #92]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d009      	beq.n	800251a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002506:	4b13      	ldr	r3, [pc, #76]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	490f      	ldr	r1, [pc, #60]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 8002516:	4313      	orrs	r3, r2
 8002518:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800251a:	f000 f825 	bl	8002568 <HAL_RCC_GetSysClockFreq>
 800251e:	4601      	mov	r1, r0
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	091b      	lsrs	r3, r3, #4
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	4a0c      	ldr	r2, [pc, #48]	; (800255c <HAL_RCC_ClockConfig+0x26c>)
 800252c:	5cd3      	ldrb	r3, [r2, r3]
 800252e:	f003 031f 	and.w	r3, r3, #31
 8002532:	fa21 f303 	lsr.w	r3, r1, r3
 8002536:	4a0a      	ldr	r2, [pc, #40]	; (8002560 <HAL_RCC_ClockConfig+0x270>)
 8002538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800253a:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <HAL_RCC_ClockConfig+0x274>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe fc4e 	bl	8000de0 <HAL_InitTick>
 8002544:	4603      	mov	r3, r0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40022000 	.word	0x40022000
 8002554:	40021000 	.word	0x40021000
 8002558:	04c4b400 	.word	0x04c4b400
 800255c:	08003794 	.word	0x08003794
 8002560:	20000044 	.word	0x20000044
 8002564:	20000048 	.word	0x20000048

08002568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800256e:	4b2c      	ldr	r3, [pc, #176]	; (8002620 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 030c 	and.w	r3, r3, #12
 8002576:	2b04      	cmp	r3, #4
 8002578:	d102      	bne.n	8002580 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800257a:	4b2a      	ldr	r3, [pc, #168]	; (8002624 <HAL_RCC_GetSysClockFreq+0xbc>)
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	e047      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002580:	4b27      	ldr	r3, [pc, #156]	; (8002620 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 030c 	and.w	r3, r3, #12
 8002588:	2b08      	cmp	r3, #8
 800258a:	d102      	bne.n	8002592 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800258c:	4b26      	ldr	r3, [pc, #152]	; (8002628 <HAL_RCC_GetSysClockFreq+0xc0>)
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	e03e      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002592:	4b23      	ldr	r3, [pc, #140]	; (8002620 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	2b0c      	cmp	r3, #12
 800259c:	d136      	bne.n	800260c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800259e:	4b20      	ldr	r3, [pc, #128]	; (8002620 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025a8:	4b1d      	ldr	r3, [pc, #116]	; (8002620 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	091b      	lsrs	r3, r3, #4
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	3301      	adds	r3, #1
 80025b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d10c      	bne.n	80025d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025bc:	4a1a      	ldr	r2, [pc, #104]	; (8002628 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c4:	4a16      	ldr	r2, [pc, #88]	; (8002620 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025c6:	68d2      	ldr	r2, [r2, #12]
 80025c8:	0a12      	lsrs	r2, r2, #8
 80025ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025ce:	fb02 f303 	mul.w	r3, r2, r3
 80025d2:	617b      	str	r3, [r7, #20]
      break;
 80025d4:	e00c      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025d6:	4a13      	ldr	r2, [pc, #76]	; (8002624 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	fbb2 f3f3 	udiv	r3, r2, r3
 80025de:	4a10      	ldr	r2, [pc, #64]	; (8002620 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025e0:	68d2      	ldr	r2, [r2, #12]
 80025e2:	0a12      	lsrs	r2, r2, #8
 80025e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025e8:	fb02 f303 	mul.w	r3, r2, r3
 80025ec:	617b      	str	r3, [r7, #20]
      break;
 80025ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	0e5b      	lsrs	r3, r3, #25
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	3301      	adds	r3, #1
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	fbb2 f3f3 	udiv	r3, r2, r3
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	e001      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800260c:	2300      	movs	r3, #0
 800260e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002610:	693b      	ldr	r3, [r7, #16]
}
 8002612:	4618      	mov	r0, r3
 8002614:	371c      	adds	r7, #28
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40021000 	.word	0x40021000
 8002624:	00f42400 	.word	0x00f42400
 8002628:	016e3600 	.word	0x016e3600

0800262c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002630:	4b03      	ldr	r3, [pc, #12]	; (8002640 <HAL_RCC_GetHCLKFreq+0x14>)
 8002632:	681b      	ldr	r3, [r3, #0]
}
 8002634:	4618      	mov	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	20000044 	.word	0x20000044

08002644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002648:	f7ff fff0 	bl	800262c <HAL_RCC_GetHCLKFreq>
 800264c:	4601      	mov	r1, r0
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	0a1b      	lsrs	r3, r3, #8
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	4a04      	ldr	r2, [pc, #16]	; (800266c <HAL_RCC_GetPCLK1Freq+0x28>)
 800265a:	5cd3      	ldrb	r3, [r2, r3]
 800265c:	f003 031f 	and.w	r3, r3, #31
 8002660:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002664:	4618      	mov	r0, r3
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40021000 	.word	0x40021000
 800266c:	080037a4 	.word	0x080037a4

08002670 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002674:	f7ff ffda 	bl	800262c <HAL_RCC_GetHCLKFreq>
 8002678:	4601      	mov	r1, r0
 800267a:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_RCC_GetPCLK2Freq+0x24>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	0adb      	lsrs	r3, r3, #11
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	4a04      	ldr	r2, [pc, #16]	; (8002698 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002686:	5cd3      	ldrb	r3, [r2, r3]
 8002688:	f003 031f 	and.w	r3, r3, #31
 800268c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002690:	4618      	mov	r0, r3
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40021000 	.word	0x40021000
 8002698:	080037a4 	.word	0x080037a4

0800269c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026a2:	4b1e      	ldr	r3, [pc, #120]	; (800271c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026ac:	4b1b      	ldr	r3, [pc, #108]	; (800271c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	091b      	lsrs	r3, r3, #4
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	3301      	adds	r3, #1
 80026b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d10c      	bne.n	80026da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026c0:	4a17      	ldr	r2, [pc, #92]	; (8002720 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c8:	4a14      	ldr	r2, [pc, #80]	; (800271c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026ca:	68d2      	ldr	r2, [r2, #12]
 80026cc:	0a12      	lsrs	r2, r2, #8
 80026ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026d2:	fb02 f303 	mul.w	r3, r2, r3
 80026d6:	617b      	str	r3, [r7, #20]
    break;
 80026d8:	e00c      	b.n	80026f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026da:	4a12      	ldr	r2, [pc, #72]	; (8002724 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e2:	4a0e      	ldr	r2, [pc, #56]	; (800271c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026e4:	68d2      	ldr	r2, [r2, #12]
 80026e6:	0a12      	lsrs	r2, r2, #8
 80026e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026ec:	fb02 f303 	mul.w	r3, r2, r3
 80026f0:	617b      	str	r3, [r7, #20]
    break;
 80026f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026f4:	4b09      	ldr	r3, [pc, #36]	; (800271c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	0e5b      	lsrs	r3, r3, #25
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	3301      	adds	r3, #1
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	fbb2 f3f3 	udiv	r3, r2, r3
 800270c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800270e:	687b      	ldr	r3, [r7, #4]
}
 8002710:	4618      	mov	r0, r3
 8002712:	371c      	adds	r7, #28
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	40021000 	.word	0x40021000
 8002720:	016e3600 	.word	0x016e3600
 8002724:	00f42400 	.word	0x00f42400

08002728 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002730:	2300      	movs	r3, #0
 8002732:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002734:	2300      	movs	r3, #0
 8002736:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 8098 	beq.w	8002876 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002746:	2300      	movs	r3, #0
 8002748:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800274a:	4b43      	ldr	r3, [pc, #268]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800274c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10d      	bne.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002756:	4b40      	ldr	r3, [pc, #256]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275a:	4a3f      	ldr	r2, [pc, #252]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800275c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002760:	6593      	str	r3, [r2, #88]	; 0x58
 8002762:	4b3d      	ldr	r3, [pc, #244]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276a:	60bb      	str	r3, [r7, #8]
 800276c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800276e:	2301      	movs	r3, #1
 8002770:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002772:	4b3a      	ldr	r3, [pc, #232]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a39      	ldr	r2, [pc, #228]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800277e:	f7fe fb7b 	bl	8000e78 <HAL_GetTick>
 8002782:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002784:	e009      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002786:	f7fe fb77 	bl	8000e78 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d902      	bls.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	74fb      	strb	r3, [r7, #19]
        break;
 8002798:	e005      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800279a:	4b30      	ldr	r3, [pc, #192]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0ef      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80027a6:	7cfb      	ldrb	r3, [r7, #19]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d159      	bne.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027ac:	4b2a      	ldr	r3, [pc, #168]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027b6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d01e      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d019      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027c8:	4b23      	ldr	r3, [pc, #140]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027d4:	4b20      	ldr	r3, [pc, #128]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027da:	4a1f      	ldr	r2, [pc, #124]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027e4:	4b1c      	ldr	r3, [pc, #112]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ea:	4a1b      	ldr	r2, [pc, #108]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027f4:	4a18      	ldr	r2, [pc, #96]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d016      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002806:	f7fe fb37 	bl	8000e78 <HAL_GetTick>
 800280a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800280c:	e00b      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800280e:	f7fe fb33 	bl	8000e78 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	f241 3288 	movw	r2, #5000	; 0x1388
 800281c:	4293      	cmp	r3, r2
 800281e:	d902      	bls.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	74fb      	strb	r3, [r7, #19]
            break;
 8002824:	e006      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002826:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0ec      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002834:	7cfb      	ldrb	r3, [r7, #19]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10b      	bne.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800283a:	4b07      	ldr	r3, [pc, #28]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800283c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002840:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002848:	4903      	ldr	r1, [pc, #12]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002850:	e008      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002852:	7cfb      	ldrb	r3, [r7, #19]
 8002854:	74bb      	strb	r3, [r7, #18]
 8002856:	e005      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002858:	40021000 	.word	0x40021000
 800285c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002860:	7cfb      	ldrb	r3, [r7, #19]
 8002862:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002864:	7c7b      	ldrb	r3, [r7, #17]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d105      	bne.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800286a:	4baf      	ldr	r3, [pc, #700]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800286c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286e:	4aae      	ldr	r2, [pc, #696]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002874:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00a      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002882:	4ba9      	ldr	r3, [pc, #676]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002888:	f023 0203 	bic.w	r2, r3, #3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	49a5      	ldr	r1, [pc, #660]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002892:	4313      	orrs	r3, r2
 8002894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00a      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028a4:	4ba0      	ldr	r3, [pc, #640]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028aa:	f023 020c 	bic.w	r2, r3, #12
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	499d      	ldr	r1, [pc, #628]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00a      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028c6:	4b98      	ldr	r3, [pc, #608]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	4994      	ldr	r1, [pc, #592]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0308 	and.w	r3, r3, #8
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00a      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028e8:	4b8f      	ldr	r3, [pc, #572]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	498c      	ldr	r1, [pc, #560]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0310 	and.w	r3, r3, #16
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800290a:	4b87      	ldr	r3, [pc, #540]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800290c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002910:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	4983      	ldr	r1, [pc, #524]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800291a:	4313      	orrs	r3, r2
 800291c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0320 	and.w	r3, r3, #32
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00a      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800292c:	4b7e      	ldr	r3, [pc, #504]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800292e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002932:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	497b      	ldr	r1, [pc, #492]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00a      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800294e:	4b76      	ldr	r3, [pc, #472]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002954:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	4972      	ldr	r1, [pc, #456]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00a      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002970:	4b6d      	ldr	r3, [pc, #436]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002976:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	496a      	ldr	r1, [pc, #424]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002992:	4b65      	ldr	r3, [pc, #404]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002998:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	4961      	ldr	r1, [pc, #388]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00a      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029b4:	4b5c      	ldr	r3, [pc, #368]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029ba:	f023 0203 	bic.w	r2, r3, #3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c2:	4959      	ldr	r1, [pc, #356]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00a      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029d6:	4b54      	ldr	r3, [pc, #336]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e4:	4950      	ldr	r1, [pc, #320]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d015      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029f8:	4b4b      	ldr	r3, [pc, #300]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	4948      	ldr	r1, [pc, #288]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a16:	d105      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a18:	4b43      	ldr	r3, [pc, #268]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	4a42      	ldr	r2, [pc, #264]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a22:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d015      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a30:	4b3d      	ldr	r3, [pc, #244]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3e:	493a      	ldr	r1, [pc, #232]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a4e:	d105      	bne.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a50:	4b35      	ldr	r3, [pc, #212]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	4a34      	ldr	r2, [pc, #208]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a5a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d015      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a68:	4b2f      	ldr	r3, [pc, #188]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a76:	492c      	ldr	r1, [pc, #176]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a82:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a86:	d105      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a88:	4b27      	ldr	r3, [pc, #156]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	4a26      	ldr	r2, [pc, #152]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a92:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d015      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002aa0:	4b21      	ldr	r3, [pc, #132]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aae:	491e      	ldr	r1, [pc, #120]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002abe:	d105      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ac0:	4b19      	ldr	r3, [pc, #100]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	4a18      	ldr	r2, [pc, #96]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ac6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d015      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ad8:	4b13      	ldr	r3, [pc, #76]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ade:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	4910      	ldr	r1, [pc, #64]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002af6:	d105      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002af8:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	4a0a      	ldr	r2, [pc, #40]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002afe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b02:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d018      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b10:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	4902      	ldr	r1, [pc, #8]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b26:	e001      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002b28:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b34:	d105      	bne.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b36:	4b21      	ldr	r3, [pc, #132]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	4a20      	ldr	r2, [pc, #128]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b40:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d015      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002b4e:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b54:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b5c:	4917      	ldr	r1, [pc, #92]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b6c:	d105      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b6e:	4b13      	ldr	r3, [pc, #76]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	4a12      	ldr	r2, [pc, #72]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b78:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d015      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b86:	4b0d      	ldr	r3, [pc, #52]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b94:	4909      	ldr	r1, [pc, #36]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ba4:	d105      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ba6:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	4a04      	ldr	r2, [pc, #16]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002bac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bb0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002bb2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40021000 	.word	0x40021000

08002bc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e042      	b.n	8002c58 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d106      	bne.n	8002bea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7fd ffdb 	bl	8000ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2224      	movs	r2, #36	; 0x24
 8002bee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0201 	bic.w	r2, r2, #1
 8002c00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f82c 	bl	8002c60 <UART_SetConfig>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d101      	bne.n	8002c12 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e022      	b.n	8002c58 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 faf2 	bl	8003204 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0201 	orr.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 fb79 	bl	8003348 <UART_CheckIdleState>
 8002c56:	4603      	mov	r3, r0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c60:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002c64:	b088      	sub	sp, #32
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c8a:	69fa      	ldr	r2, [r7, #28]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	4bb1      	ldr	r3, [pc, #708]	; (8002f5c <UART_SetConfig+0x2fc>)
 8002c98:	4013      	ands	r3, r2
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6812      	ldr	r2, [r2, #0]
 8002c9e:	69f9      	ldr	r1, [r7, #28]
 8002ca0:	430b      	orrs	r3, r1
 8002ca2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4aa6      	ldr	r2, [pc, #664]	; (8002f60 <UART_SetConfig+0x300>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d004      	beq.n	8002cd4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	69fa      	ldr	r2, [r7, #28]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002cde:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6812      	ldr	r2, [r2, #0]
 8002ce6:	69f9      	ldr	r1, [r7, #28]
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf2:	f023 010f 	bic.w	r1, r3, #15
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a97      	ldr	r2, [pc, #604]	; (8002f64 <UART_SetConfig+0x304>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d121      	bne.n	8002d50 <UART_SetConfig+0xf0>
 8002d0c:	4b96      	ldr	r3, [pc, #600]	; (8002f68 <UART_SetConfig+0x308>)
 8002d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	d816      	bhi.n	8002d48 <UART_SetConfig+0xe8>
 8002d1a:	a201      	add	r2, pc, #4	; (adr r2, 8002d20 <UART_SetConfig+0xc0>)
 8002d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d20:	08002d31 	.word	0x08002d31
 8002d24:	08002d3d 	.word	0x08002d3d
 8002d28:	08002d37 	.word	0x08002d37
 8002d2c:	08002d43 	.word	0x08002d43
 8002d30:	2301      	movs	r3, #1
 8002d32:	76fb      	strb	r3, [r7, #27]
 8002d34:	e0e8      	b.n	8002f08 <UART_SetConfig+0x2a8>
 8002d36:	2302      	movs	r3, #2
 8002d38:	76fb      	strb	r3, [r7, #27]
 8002d3a:	e0e5      	b.n	8002f08 <UART_SetConfig+0x2a8>
 8002d3c:	2304      	movs	r3, #4
 8002d3e:	76fb      	strb	r3, [r7, #27]
 8002d40:	e0e2      	b.n	8002f08 <UART_SetConfig+0x2a8>
 8002d42:	2308      	movs	r3, #8
 8002d44:	76fb      	strb	r3, [r7, #27]
 8002d46:	e0df      	b.n	8002f08 <UART_SetConfig+0x2a8>
 8002d48:	2310      	movs	r3, #16
 8002d4a:	76fb      	strb	r3, [r7, #27]
 8002d4c:	bf00      	nop
 8002d4e:	e0db      	b.n	8002f08 <UART_SetConfig+0x2a8>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a85      	ldr	r2, [pc, #532]	; (8002f6c <UART_SetConfig+0x30c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d134      	bne.n	8002dc4 <UART_SetConfig+0x164>
 8002d5a:	4b83      	ldr	r3, [pc, #524]	; (8002f68 <UART_SetConfig+0x308>)
 8002d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d60:	f003 030c 	and.w	r3, r3, #12
 8002d64:	2b0c      	cmp	r3, #12
 8002d66:	d829      	bhi.n	8002dbc <UART_SetConfig+0x15c>
 8002d68:	a201      	add	r2, pc, #4	; (adr r2, 8002d70 <UART_SetConfig+0x110>)
 8002d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6e:	bf00      	nop
 8002d70:	08002da5 	.word	0x08002da5
 8002d74:	08002dbd 	.word	0x08002dbd
 8002d78:	08002dbd 	.word	0x08002dbd
 8002d7c:	08002dbd 	.word	0x08002dbd
 8002d80:	08002db1 	.word	0x08002db1
 8002d84:	08002dbd 	.word	0x08002dbd
 8002d88:	08002dbd 	.word	0x08002dbd
 8002d8c:	08002dbd 	.word	0x08002dbd
 8002d90:	08002dab 	.word	0x08002dab
 8002d94:	08002dbd 	.word	0x08002dbd
 8002d98:	08002dbd 	.word	0x08002dbd
 8002d9c:	08002dbd 	.word	0x08002dbd
 8002da0:	08002db7 	.word	0x08002db7
 8002da4:	2300      	movs	r3, #0
 8002da6:	76fb      	strb	r3, [r7, #27]
 8002da8:	e0ae      	b.n	8002f08 <UART_SetConfig+0x2a8>
 8002daa:	2302      	movs	r3, #2
 8002dac:	76fb      	strb	r3, [r7, #27]
 8002dae:	e0ab      	b.n	8002f08 <UART_SetConfig+0x2a8>
 8002db0:	2304      	movs	r3, #4
 8002db2:	76fb      	strb	r3, [r7, #27]
 8002db4:	e0a8      	b.n	8002f08 <UART_SetConfig+0x2a8>
 8002db6:	2308      	movs	r3, #8
 8002db8:	76fb      	strb	r3, [r7, #27]
 8002dba:	e0a5      	b.n	8002f08 <UART_SetConfig+0x2a8>
 8002dbc:	2310      	movs	r3, #16
 8002dbe:	76fb      	strb	r3, [r7, #27]
 8002dc0:	bf00      	nop
 8002dc2:	e0a1      	b.n	8002f08 <UART_SetConfig+0x2a8>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a69      	ldr	r2, [pc, #420]	; (8002f70 <UART_SetConfig+0x310>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d120      	bne.n	8002e10 <UART_SetConfig+0x1b0>
 8002dce:	4b66      	ldr	r3, [pc, #408]	; (8002f68 <UART_SetConfig+0x308>)
 8002dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002dd8:	2b10      	cmp	r3, #16
 8002dda:	d00f      	beq.n	8002dfc <UART_SetConfig+0x19c>
 8002ddc:	2b10      	cmp	r3, #16
 8002dde:	d802      	bhi.n	8002de6 <UART_SetConfig+0x186>
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <UART_SetConfig+0x190>
 8002de4:	e010      	b.n	8002e08 <UART_SetConfig+0x1a8>
 8002de6:	2b20      	cmp	r3, #32
 8002de8:	d005      	beq.n	8002df6 <UART_SetConfig+0x196>
 8002dea:	2b30      	cmp	r3, #48	; 0x30
 8002dec:	d009      	beq.n	8002e02 <UART_SetConfig+0x1a2>
 8002dee:	e00b      	b.n	8002e08 <UART_SetConfig+0x1a8>
 8002df0:	2300      	movs	r3, #0
 8002df2:	76fb      	strb	r3, [r7, #27]
 8002df4:	e088      	b.n	8002f08 <UART_SetConfig+0x2a8>
 8002df6:	2302      	movs	r3, #2
 8002df8:	76fb      	strb	r3, [r7, #27]
 8002dfa:	e085      	b.n	8002f08 <UART_SetConfig+0x2a8>
 8002dfc:	2304      	movs	r3, #4
 8002dfe:	76fb      	strb	r3, [r7, #27]
 8002e00:	e082      	b.n	8002f08 <UART_SetConfig+0x2a8>
 8002e02:	2308      	movs	r3, #8
 8002e04:	76fb      	strb	r3, [r7, #27]
 8002e06:	e07f      	b.n	8002f08 <UART_SetConfig+0x2a8>
 8002e08:	2310      	movs	r3, #16
 8002e0a:	76fb      	strb	r3, [r7, #27]
 8002e0c:	bf00      	nop
 8002e0e:	e07b      	b.n	8002f08 <UART_SetConfig+0x2a8>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a57      	ldr	r2, [pc, #348]	; (8002f74 <UART_SetConfig+0x314>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d120      	bne.n	8002e5c <UART_SetConfig+0x1fc>
 8002e1a:	4b53      	ldr	r3, [pc, #332]	; (8002f68 <UART_SetConfig+0x308>)
 8002e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e20:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e24:	2b40      	cmp	r3, #64	; 0x40
 8002e26:	d00f      	beq.n	8002e48 <UART_SetConfig+0x1e8>
 8002e28:	2b40      	cmp	r3, #64	; 0x40
 8002e2a:	d802      	bhi.n	8002e32 <UART_SetConfig+0x1d2>
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <UART_SetConfig+0x1dc>
 8002e30:	e010      	b.n	8002e54 <UART_SetConfig+0x1f4>
 8002e32:	2b80      	cmp	r3, #128	; 0x80
 8002e34:	d005      	beq.n	8002e42 <UART_SetConfig+0x1e2>
 8002e36:	2bc0      	cmp	r3, #192	; 0xc0
 8002e38:	d009      	beq.n	8002e4e <UART_SetConfig+0x1ee>
 8002e3a:	e00b      	b.n	8002e54 <UART_SetConfig+0x1f4>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	76fb      	strb	r3, [r7, #27]
 8002e40:	e062      	b.n	8002f08 <UART_SetConfig+0x2a8>
 8002e42:	2302      	movs	r3, #2
 8002e44:	76fb      	strb	r3, [r7, #27]
 8002e46:	e05f      	b.n	8002f08 <UART_SetConfig+0x2a8>
 8002e48:	2304      	movs	r3, #4
 8002e4a:	76fb      	strb	r3, [r7, #27]
 8002e4c:	e05c      	b.n	8002f08 <UART_SetConfig+0x2a8>
 8002e4e:	2308      	movs	r3, #8
 8002e50:	76fb      	strb	r3, [r7, #27]
 8002e52:	e059      	b.n	8002f08 <UART_SetConfig+0x2a8>
 8002e54:	2310      	movs	r3, #16
 8002e56:	76fb      	strb	r3, [r7, #27]
 8002e58:	bf00      	nop
 8002e5a:	e055      	b.n	8002f08 <UART_SetConfig+0x2a8>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a45      	ldr	r2, [pc, #276]	; (8002f78 <UART_SetConfig+0x318>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d124      	bne.n	8002eb0 <UART_SetConfig+0x250>
 8002e66:	4b40      	ldr	r3, [pc, #256]	; (8002f68 <UART_SetConfig+0x308>)
 8002e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e74:	d012      	beq.n	8002e9c <UART_SetConfig+0x23c>
 8002e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e7a:	d802      	bhi.n	8002e82 <UART_SetConfig+0x222>
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d007      	beq.n	8002e90 <UART_SetConfig+0x230>
 8002e80:	e012      	b.n	8002ea8 <UART_SetConfig+0x248>
 8002e82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e86:	d006      	beq.n	8002e96 <UART_SetConfig+0x236>
 8002e88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e8c:	d009      	beq.n	8002ea2 <UART_SetConfig+0x242>
 8002e8e:	e00b      	b.n	8002ea8 <UART_SetConfig+0x248>
 8002e90:	2300      	movs	r3, #0
 8002e92:	76fb      	strb	r3, [r7, #27]
 8002e94:	e038      	b.n	8002f08 <UART_SetConfig+0x2a8>
 8002e96:	2302      	movs	r3, #2
 8002e98:	76fb      	strb	r3, [r7, #27]
 8002e9a:	e035      	b.n	8002f08 <UART_SetConfig+0x2a8>
 8002e9c:	2304      	movs	r3, #4
 8002e9e:	76fb      	strb	r3, [r7, #27]
 8002ea0:	e032      	b.n	8002f08 <UART_SetConfig+0x2a8>
 8002ea2:	2308      	movs	r3, #8
 8002ea4:	76fb      	strb	r3, [r7, #27]
 8002ea6:	e02f      	b.n	8002f08 <UART_SetConfig+0x2a8>
 8002ea8:	2310      	movs	r3, #16
 8002eaa:	76fb      	strb	r3, [r7, #27]
 8002eac:	bf00      	nop
 8002eae:	e02b      	b.n	8002f08 <UART_SetConfig+0x2a8>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a2a      	ldr	r2, [pc, #168]	; (8002f60 <UART_SetConfig+0x300>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d124      	bne.n	8002f04 <UART_SetConfig+0x2a4>
 8002eba:	4b2b      	ldr	r3, [pc, #172]	; (8002f68 <UART_SetConfig+0x308>)
 8002ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec8:	d012      	beq.n	8002ef0 <UART_SetConfig+0x290>
 8002eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ece:	d802      	bhi.n	8002ed6 <UART_SetConfig+0x276>
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d007      	beq.n	8002ee4 <UART_SetConfig+0x284>
 8002ed4:	e012      	b.n	8002efc <UART_SetConfig+0x29c>
 8002ed6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eda:	d006      	beq.n	8002eea <UART_SetConfig+0x28a>
 8002edc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ee0:	d009      	beq.n	8002ef6 <UART_SetConfig+0x296>
 8002ee2:	e00b      	b.n	8002efc <UART_SetConfig+0x29c>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	76fb      	strb	r3, [r7, #27]
 8002ee8:	e00e      	b.n	8002f08 <UART_SetConfig+0x2a8>
 8002eea:	2302      	movs	r3, #2
 8002eec:	76fb      	strb	r3, [r7, #27]
 8002eee:	e00b      	b.n	8002f08 <UART_SetConfig+0x2a8>
 8002ef0:	2304      	movs	r3, #4
 8002ef2:	76fb      	strb	r3, [r7, #27]
 8002ef4:	e008      	b.n	8002f08 <UART_SetConfig+0x2a8>
 8002ef6:	2308      	movs	r3, #8
 8002ef8:	76fb      	strb	r3, [r7, #27]
 8002efa:	e005      	b.n	8002f08 <UART_SetConfig+0x2a8>
 8002efc:	2310      	movs	r3, #16
 8002efe:	76fb      	strb	r3, [r7, #27]
 8002f00:	bf00      	nop
 8002f02:	e001      	b.n	8002f08 <UART_SetConfig+0x2a8>
 8002f04:	2310      	movs	r3, #16
 8002f06:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a14      	ldr	r2, [pc, #80]	; (8002f60 <UART_SetConfig+0x300>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	f040 80a1 	bne.w	8003056 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f14:	7efb      	ldrb	r3, [r7, #27]
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d836      	bhi.n	8002f88 <UART_SetConfig+0x328>
 8002f1a:	a201      	add	r2, pc, #4	; (adr r2, 8002f20 <UART_SetConfig+0x2c0>)
 8002f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f20:	08002f45 	.word	0x08002f45
 8002f24:	08002f89 	.word	0x08002f89
 8002f28:	08002f4d 	.word	0x08002f4d
 8002f2c:	08002f89 	.word	0x08002f89
 8002f30:	08002f53 	.word	0x08002f53
 8002f34:	08002f89 	.word	0x08002f89
 8002f38:	08002f89 	.word	0x08002f89
 8002f3c:	08002f89 	.word	0x08002f89
 8002f40:	08002f81 	.word	0x08002f81
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f44:	f7ff fb7e 	bl	8002644 <HAL_RCC_GetPCLK1Freq>
 8002f48:	6178      	str	r0, [r7, #20]
        break;
 8002f4a:	e022      	b.n	8002f92 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f4c:	4b0b      	ldr	r3, [pc, #44]	; (8002f7c <UART_SetConfig+0x31c>)
 8002f4e:	617b      	str	r3, [r7, #20]
        break;
 8002f50:	e01f      	b.n	8002f92 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f52:	f7ff fb09 	bl	8002568 <HAL_RCC_GetSysClockFreq>
 8002f56:	6178      	str	r0, [r7, #20]
        break;
 8002f58:	e01b      	b.n	8002f92 <UART_SetConfig+0x332>
 8002f5a:	bf00      	nop
 8002f5c:	cfff69f3 	.word	0xcfff69f3
 8002f60:	40008000 	.word	0x40008000
 8002f64:	40013800 	.word	0x40013800
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	40004400 	.word	0x40004400
 8002f70:	40004800 	.word	0x40004800
 8002f74:	40004c00 	.word	0x40004c00
 8002f78:	40005000 	.word	0x40005000
 8002f7c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f84:	617b      	str	r3, [r7, #20]
        break;
 8002f86:	e004      	b.n	8002f92 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	76bb      	strb	r3, [r7, #26]
        break;
 8002f90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 811d 	beq.w	80031d4 <UART_SetConfig+0x574>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	4a97      	ldr	r2, [pc, #604]	; (80031fc <UART_SetConfig+0x59c>)
 8002fa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fac:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	4413      	add	r3, r2
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d305      	bcc.n	8002fca <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d902      	bls.n	8002fd0 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	76bb      	strb	r3, [r7, #26]
 8002fce:	e101      	b.n	80031d4 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f04f 0100 	mov.w	r1, #0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	4a87      	ldr	r2, [pc, #540]	; (80031fc <UART_SetConfig+0x59c>)
 8002fde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	f04f 0400 	mov.w	r4, #0
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4623      	mov	r3, r4
 8002fec:	f7fd f914 	bl	8000218 <__aeabi_uldivmod>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	460c      	mov	r4, r1
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4622      	mov	r2, r4
 8002ff8:	f04f 0300 	mov.w	r3, #0
 8002ffc:	f04f 0400 	mov.w	r4, #0
 8003000:	0214      	lsls	r4, r2, #8
 8003002:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003006:	020b      	lsls	r3, r1, #8
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6852      	ldr	r2, [r2, #4]
 800300c:	0852      	lsrs	r2, r2, #1
 800300e:	4611      	mov	r1, r2
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	eb13 0b01 	adds.w	fp, r3, r1
 8003018:	eb44 0c02 	adc.w	ip, r4, r2
 800301c:	4658      	mov	r0, fp
 800301e:	4661      	mov	r1, ip
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f04f 0400 	mov.w	r4, #0
 8003028:	461a      	mov	r2, r3
 800302a:	4623      	mov	r3, r4
 800302c:	f7fd f8f4 	bl	8000218 <__aeabi_uldivmod>
 8003030:	4603      	mov	r3, r0
 8003032:	460c      	mov	r4, r1
 8003034:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800303c:	d308      	bcc.n	8003050 <UART_SetConfig+0x3f0>
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003044:	d204      	bcs.n	8003050 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	60da      	str	r2, [r3, #12]
 800304e:	e0c1      	b.n	80031d4 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	76bb      	strb	r3, [r7, #26]
 8003054:	e0be      	b.n	80031d4 <UART_SetConfig+0x574>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800305e:	d164      	bne.n	800312a <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8003060:	7efb      	ldrb	r3, [r7, #27]
 8003062:	2b08      	cmp	r3, #8
 8003064:	d827      	bhi.n	80030b6 <UART_SetConfig+0x456>
 8003066:	a201      	add	r2, pc, #4	; (adr r2, 800306c <UART_SetConfig+0x40c>)
 8003068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306c:	08003091 	.word	0x08003091
 8003070:	08003099 	.word	0x08003099
 8003074:	080030a1 	.word	0x080030a1
 8003078:	080030b7 	.word	0x080030b7
 800307c:	080030a7 	.word	0x080030a7
 8003080:	080030b7 	.word	0x080030b7
 8003084:	080030b7 	.word	0x080030b7
 8003088:	080030b7 	.word	0x080030b7
 800308c:	080030af 	.word	0x080030af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003090:	f7ff fad8 	bl	8002644 <HAL_RCC_GetPCLK1Freq>
 8003094:	6178      	str	r0, [r7, #20]
        break;
 8003096:	e013      	b.n	80030c0 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003098:	f7ff faea 	bl	8002670 <HAL_RCC_GetPCLK2Freq>
 800309c:	6178      	str	r0, [r7, #20]
        break;
 800309e:	e00f      	b.n	80030c0 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030a0:	4b57      	ldr	r3, [pc, #348]	; (8003200 <UART_SetConfig+0x5a0>)
 80030a2:	617b      	str	r3, [r7, #20]
        break;
 80030a4:	e00c      	b.n	80030c0 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030a6:	f7ff fa5f 	bl	8002568 <HAL_RCC_GetSysClockFreq>
 80030aa:	6178      	str	r0, [r7, #20]
        break;
 80030ac:	e008      	b.n	80030c0 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030b2:	617b      	str	r3, [r7, #20]
        break;
 80030b4:	e004      	b.n	80030c0 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	76bb      	strb	r3, [r7, #26]
        break;
 80030be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 8086 	beq.w	80031d4 <UART_SetConfig+0x574>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	4a4b      	ldr	r2, [pc, #300]	; (80031fc <UART_SetConfig+0x59c>)
 80030ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030d2:	461a      	mov	r2, r3
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80030da:	005a      	lsls	r2, r3, #1
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	085b      	lsrs	r3, r3, #1
 80030e2:	441a      	add	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	2b0f      	cmp	r3, #15
 80030f4:	d916      	bls.n	8003124 <UART_SetConfig+0x4c4>
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030fc:	d212      	bcs.n	8003124 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	b29b      	uxth	r3, r3
 8003102:	f023 030f 	bic.w	r3, r3, #15
 8003106:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	085b      	lsrs	r3, r3, #1
 800310c:	b29b      	uxth	r3, r3
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	b29a      	uxth	r2, r3
 8003114:	89fb      	ldrh	r3, [r7, #14]
 8003116:	4313      	orrs	r3, r2
 8003118:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	89fa      	ldrh	r2, [r7, #14]
 8003120:	60da      	str	r2, [r3, #12]
 8003122:	e057      	b.n	80031d4 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	76bb      	strb	r3, [r7, #26]
 8003128:	e054      	b.n	80031d4 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 800312a:	7efb      	ldrb	r3, [r7, #27]
 800312c:	2b08      	cmp	r3, #8
 800312e:	d828      	bhi.n	8003182 <UART_SetConfig+0x522>
 8003130:	a201      	add	r2, pc, #4	; (adr r2, 8003138 <UART_SetConfig+0x4d8>)
 8003132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003136:	bf00      	nop
 8003138:	0800315d 	.word	0x0800315d
 800313c:	08003165 	.word	0x08003165
 8003140:	0800316d 	.word	0x0800316d
 8003144:	08003183 	.word	0x08003183
 8003148:	08003173 	.word	0x08003173
 800314c:	08003183 	.word	0x08003183
 8003150:	08003183 	.word	0x08003183
 8003154:	08003183 	.word	0x08003183
 8003158:	0800317b 	.word	0x0800317b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800315c:	f7ff fa72 	bl	8002644 <HAL_RCC_GetPCLK1Freq>
 8003160:	6178      	str	r0, [r7, #20]
        break;
 8003162:	e013      	b.n	800318c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003164:	f7ff fa84 	bl	8002670 <HAL_RCC_GetPCLK2Freq>
 8003168:	6178      	str	r0, [r7, #20]
        break;
 800316a:	e00f      	b.n	800318c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800316c:	4b24      	ldr	r3, [pc, #144]	; (8003200 <UART_SetConfig+0x5a0>)
 800316e:	617b      	str	r3, [r7, #20]
        break;
 8003170:	e00c      	b.n	800318c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003172:	f7ff f9f9 	bl	8002568 <HAL_RCC_GetSysClockFreq>
 8003176:	6178      	str	r0, [r7, #20]
        break;
 8003178:	e008      	b.n	800318c <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800317a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800317e:	617b      	str	r3, [r7, #20]
        break;
 8003180:	e004      	b.n	800318c <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	76bb      	strb	r3, [r7, #26]
        break;
 800318a:	bf00      	nop
    }

    if (pclk != 0U)
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d020      	beq.n	80031d4 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	4a19      	ldr	r2, [pc, #100]	; (80031fc <UART_SetConfig+0x59c>)
 8003198:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800319c:	461a      	mov	r2, r3
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	085b      	lsrs	r3, r3, #1
 80031aa:	441a      	add	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	2b0f      	cmp	r3, #15
 80031bc:	d908      	bls.n	80031d0 <UART_SetConfig+0x570>
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c4:	d204      	bcs.n	80031d0 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	60da      	str	r2, [r3, #12]
 80031ce:	e001      	b.n	80031d4 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80031f0:	7ebb      	ldrb	r3, [r7, #26]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3720      	adds	r7, #32
 80031f6:	46bd      	mov	sp, r7
 80031f8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80031fc:	080037bc 	.word	0x080037bc
 8003200:	00f42400 	.word	0x00f42400

08003204 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00a      	beq.n	800322e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00a      	beq.n	8003250 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00a      	beq.n	8003272 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00a      	beq.n	8003294 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003298:	f003 0310 	and.w	r3, r3, #16
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00a      	beq.n	80032b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ba:	f003 0320 	and.w	r3, r3, #32
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00a      	beq.n	80032d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d01a      	beq.n	800331a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003302:	d10a      	bne.n	800331a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	605a      	str	r2, [r3, #4]
  }
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af02      	add	r7, sp, #8
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003358:	f7fd fd8e 	bl	8000e78 <HAL_GetTick>
 800335c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0308 	and.w	r3, r3, #8
 8003368:	2b08      	cmp	r3, #8
 800336a:	d10e      	bne.n	800338a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800336c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f82c 	bl	80033d8 <UART_WaitOnFlagUntilTimeout>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e022      	b.n	80033d0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b04      	cmp	r3, #4
 8003396:	d10e      	bne.n	80033b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003398:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f816 	bl	80033d8 <UART_WaitOnFlagUntilTimeout>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e00c      	b.n	80033d0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	603b      	str	r3, [r7, #0]
 80033e4:	4613      	mov	r3, r2
 80033e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033e8:	e062      	b.n	80034b0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f0:	d05e      	beq.n	80034b0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f2:	f7fd fd41 	bl	8000e78 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d302      	bcc.n	8003408 <UART_WaitOnFlagUntilTimeout+0x30>
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d11d      	bne.n	8003444 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003416:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0201 	bic.w	r2, r2, #1
 8003426:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2220      	movs	r2, #32
 800342c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2220      	movs	r2, #32
 8003434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e045      	b.n	80034d0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0304 	and.w	r3, r3, #4
 800344e:	2b00      	cmp	r3, #0
 8003450:	d02e      	beq.n	80034b0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800345c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003460:	d126      	bne.n	80034b0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800346a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800347a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0201 	bic.w	r2, r2, #1
 800348a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2220      	movs	r2, #32
 8003490:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2220      	movs	r2, #32
 8003498:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2220      	movs	r2, #32
 80034a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e00f      	b.n	80034d0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	69da      	ldr	r2, [r3, #28]
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	4013      	ands	r3, r2
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	429a      	cmp	r2, r3
 80034be:	bf0c      	ite	eq
 80034c0:	2301      	moveq	r3, #1
 80034c2:	2300      	movne	r3, #0
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	461a      	mov	r2, r3
 80034c8:	79fb      	ldrb	r3, [r7, #7]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d08d      	beq.n	80033ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d101      	bne.n	80034ee <HAL_UARTEx_DisableFifoMode+0x16>
 80034ea:	2302      	movs	r3, #2
 80034ec:	e027      	b.n	800353e <HAL_UARTEx_DisableFifoMode+0x66>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2224      	movs	r2, #36	; 0x24
 80034fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0201 	bic.w	r2, r2, #1
 8003514:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800351c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2220      	movs	r2, #32
 8003530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800355a:	2b01      	cmp	r3, #1
 800355c:	d101      	bne.n	8003562 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800355e:	2302      	movs	r3, #2
 8003560:	e02d      	b.n	80035be <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2224      	movs	r2, #36	; 0x24
 800356e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0201 	bic.w	r2, r2, #1
 8003588:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f850 	bl	8003644 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b084      	sub	sp, #16
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d101      	bne.n	80035de <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80035da:	2302      	movs	r3, #2
 80035dc:	e02d      	b.n	800363a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2224      	movs	r2, #36	; 0x24
 80035ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0201 	bic.w	r2, r2, #1
 8003604:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f812 	bl	8003644 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2220      	movs	r2, #32
 800362c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003644:	b480      	push	{r7}
 8003646:	b089      	sub	sp, #36	; 0x24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800364c:	4a2f      	ldr	r2, [pc, #188]	; (800370c <UARTEx_SetNbDataToProcess+0xc8>)
 800364e:	f107 0314 	add.w	r3, r7, #20
 8003652:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003656:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800365a:	4a2d      	ldr	r2, [pc, #180]	; (8003710 <UARTEx_SetNbDataToProcess+0xcc>)
 800365c:	f107 030c 	add.w	r3, r7, #12
 8003660:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003664:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800366c:	2b00      	cmp	r3, #0
 800366e:	d108      	bne.n	8003682 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003680:	e03d      	b.n	80036fe <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003682:	2308      	movs	r3, #8
 8003684:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003686:	2308      	movs	r3, #8
 8003688:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	0e5b      	lsrs	r3, r3, #25
 8003692:	b2db      	uxtb	r3, r3
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	0f5b      	lsrs	r3, r3, #29
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80036aa:	7fbb      	ldrb	r3, [r7, #30]
 80036ac:	7f3a      	ldrb	r2, [r7, #28]
 80036ae:	f107 0120 	add.w	r1, r7, #32
 80036b2:	440a      	add	r2, r1
 80036b4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80036b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80036bc:	7f3a      	ldrb	r2, [r7, #28]
 80036be:	f107 0120 	add.w	r1, r7, #32
 80036c2:	440a      	add	r2, r1
 80036c4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80036c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80036d4:	7ffb      	ldrb	r3, [r7, #31]
 80036d6:	7f7a      	ldrb	r2, [r7, #29]
 80036d8:	f107 0120 	add.w	r1, r7, #32
 80036dc:	440a      	add	r2, r1
 80036de:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80036e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80036e6:	7f7a      	ldrb	r2, [r7, #29]
 80036e8:	f107 0120 	add.w	r1, r7, #32
 80036ec:	440a      	add	r2, r1
 80036ee:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80036f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80036fe:	bf00      	nop
 8003700:	3724      	adds	r7, #36	; 0x24
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	08003784 	.word	0x08003784
 8003710:	0800378c 	.word	0x0800378c

08003714 <__libc_init_array>:
 8003714:	b570      	push	{r4, r5, r6, lr}
 8003716:	4e0d      	ldr	r6, [pc, #52]	; (800374c <__libc_init_array+0x38>)
 8003718:	4c0d      	ldr	r4, [pc, #52]	; (8003750 <__libc_init_array+0x3c>)
 800371a:	1ba4      	subs	r4, r4, r6
 800371c:	10a4      	asrs	r4, r4, #2
 800371e:	2500      	movs	r5, #0
 8003720:	42a5      	cmp	r5, r4
 8003722:	d109      	bne.n	8003738 <__libc_init_array+0x24>
 8003724:	4e0b      	ldr	r6, [pc, #44]	; (8003754 <__libc_init_array+0x40>)
 8003726:	4c0c      	ldr	r4, [pc, #48]	; (8003758 <__libc_init_array+0x44>)
 8003728:	f000 f820 	bl	800376c <_init>
 800372c:	1ba4      	subs	r4, r4, r6
 800372e:	10a4      	asrs	r4, r4, #2
 8003730:	2500      	movs	r5, #0
 8003732:	42a5      	cmp	r5, r4
 8003734:	d105      	bne.n	8003742 <__libc_init_array+0x2e>
 8003736:	bd70      	pop	{r4, r5, r6, pc}
 8003738:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800373c:	4798      	blx	r3
 800373e:	3501      	adds	r5, #1
 8003740:	e7ee      	b.n	8003720 <__libc_init_array+0xc>
 8003742:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003746:	4798      	blx	r3
 8003748:	3501      	adds	r5, #1
 800374a:	e7f2      	b.n	8003732 <__libc_init_array+0x1e>
 800374c:	080037dc 	.word	0x080037dc
 8003750:	080037dc 	.word	0x080037dc
 8003754:	080037dc 	.word	0x080037dc
 8003758:	080037e0 	.word	0x080037e0

0800375c <memset>:
 800375c:	4402      	add	r2, r0
 800375e:	4603      	mov	r3, r0
 8003760:	4293      	cmp	r3, r2
 8003762:	d100      	bne.n	8003766 <memset+0xa>
 8003764:	4770      	bx	lr
 8003766:	f803 1b01 	strb.w	r1, [r3], #1
 800376a:	e7f9      	b.n	8003760 <memset+0x4>

0800376c <_init>:
 800376c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376e:	bf00      	nop
 8003770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003772:	bc08      	pop	{r3}
 8003774:	469e      	mov	lr, r3
 8003776:	4770      	bx	lr

08003778 <_fini>:
 8003778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800377a:	bf00      	nop
 800377c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800377e:	bc08      	pop	{r3}
 8003780:	469e      	mov	lr, r3
 8003782:	4770      	bx	lr
