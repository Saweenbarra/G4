
G4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003314  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080034ec  080034ec  000134ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800353c  0800353c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800353c  0800353c  0001353c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003544  08003544  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003544  08003544  00013544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003548  08003548  00013548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800354c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000000c  08003558  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08003558  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0df  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001859  00000000  00000000  0002c11b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b30  00000000  00000000  0002d978  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a58  00000000  00000000  0002e4a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002416c  00000000  00000000  0002ef00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008298  00000000  00000000  0005306c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e7a34  00000000  00000000  0005b304  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00142d38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e38  00000000  00000000  00142db4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080034d4 	.word	0x080034d4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080034d4 	.word	0x080034d4

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 fb1b 	bl	8000b56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f832 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 f92a 	bl	800077c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000528:	f000 f8e2 	bl	80006f0 <MX_LPUART1_UART_Init>
  MX_FDCAN1_Init();
 800052c:	f000 f89a 	bl	8000664 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  FDCAN_Config();
 8000530:	f000 f994 	bl	800085c <FDCAN_Config>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  TxData[0] = 0xFF;
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <main+0x64>)
 8000536:	22ff      	movs	r2, #255	; 0xff
 8000538:	701a      	strb	r2, [r3, #0]
	  	  TxData[1] = 0xFF;
 800053a:	4b10      	ldr	r3, [pc, #64]	; (800057c <main+0x64>)
 800053c:	22ff      	movs	r2, #255	; 0xff
 800053e:	705a      	strb	r2, [r3, #1]

	  	  /* Start the Transmission process */
	  	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) == HAL_OK)
 8000540:	4a0e      	ldr	r2, [pc, #56]	; (800057c <main+0x64>)
 8000542:	490f      	ldr	r1, [pc, #60]	; (8000580 <main+0x68>)
 8000544:	480f      	ldr	r0, [pc, #60]	; (8000584 <main+0x6c>)
 8000546:	f000 feb6 	bl	80012b6 <HAL_FDCAN_AddMessageToTxFifoQ>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d10d      	bne.n	800056c <main+0x54>
	  	  {
	  		/* Transmission request Error */
	  		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000550:	2120      	movs	r1, #32
 8000552:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000556:	f001 f975 	bl	8001844 <HAL_GPIO_TogglePin>
	  		HAL_Delay(100);
 800055a:	2064      	movs	r0, #100	; 0x64
 800055c:	f000 fb6c 	bl	8000c38 <HAL_Delay>
	  		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000560:	2120      	movs	r1, #32
 8000562:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000566:	f001 f96d 	bl	8001844 <HAL_GPIO_TogglePin>
 800056a:	e001      	b.n	8000570 <main+0x58>
	  	  }
	  	  else
	  	  {
	  		Error_Handler();
 800056c:	f000 f9cc 	bl	8000908 <Error_Handler>
	  	  }
	  	  HAL_Delay(500);
 8000570:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000574:	f000 fb60 	bl	8000c38 <HAL_Delay>
	  TxData[0] = 0xFF;
 8000578:	e7dc      	b.n	8000534 <main+0x1c>
 800057a:	bf00      	nop
 800057c:	20000118 	.word	0x20000118
 8000580:	20000128 	.word	0x20000128
 8000584:	200000b4 	.word	0x200000b4

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b0a8      	sub	sp, #160	; 0xa0
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000592:	2238      	movs	r2, #56	; 0x38
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f002 ff94 	bl	80034c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005ac:	463b      	mov	r3, r7
 80005ae:	2254      	movs	r2, #84	; 0x54
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 ff86 	bl	80034c4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005bc:	f001 f980 	bl	80018c0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c0:	2302      	movs	r3, #2
 80005c2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005c8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ca:	2340      	movs	r3, #64	; 0x40
 80005cc:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d4:	2302      	movs	r3, #2
 80005d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005da:	2304      	movs	r3, #4
 80005dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 75;
 80005e0:	234b      	movs	r3, #75	; 0x4b
 80005e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005fc:	4618      	mov	r0, r3
 80005fe:	f001 fa13 	bl	8001a28 <HAL_RCC_OscConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000608:	f000 f97e 	bl	8000908 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060c:	230f      	movs	r3, #15
 800060e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000610:	2303      	movs	r3, #3
 8000612:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000618:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800061c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000622:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000626:	2104      	movs	r1, #4
 8000628:	4618      	mov	r0, r3
 800062a:	f001 fd15 	bl	8002058 <HAL_RCC_ClockConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000634:	f000 f968 	bl	8000908 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_FDCAN;
 8000638:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800063c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800063e:	2300      	movs	r3, #0
 8000640:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000642:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000646:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000648:	463b      	mov	r3, r7
 800064a:	4618      	mov	r0, r3
 800064c:	f001 ff20 	bl	8002490 <HAL_RCCEx_PeriphCLKConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000656:	f000 f957 	bl	8000908 <Error_Handler>
  }
}
 800065a:	bf00      	nop
 800065c:	37a0      	adds	r7, #160	; 0xa0
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <MX_FDCAN1_Init+0x84>)
 800066a:	4a20      	ldr	r2, [pc, #128]	; (80006ec <MX_FDCAN1_Init+0x88>)
 800066c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800066e:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <MX_FDCAN1_Init+0x84>)
 8000670:	2200      	movs	r2, #0
 8000672:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000674:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <MX_FDCAN1_Init+0x84>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <MX_FDCAN1_Init+0x84>)
 800067c:	2200      	movs	r2, #0
 800067e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000680:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <MX_FDCAN1_Init+0x84>)
 8000682:	2200      	movs	r2, #0
 8000684:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000686:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <MX_FDCAN1_Init+0x84>)
 8000688:	2200      	movs	r2, #0
 800068a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800068c:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <MX_FDCAN1_Init+0x84>)
 800068e:	2200      	movs	r2, #0
 8000690:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <MX_FDCAN1_Init+0x84>)
 8000694:	2201      	movs	r2, #1
 8000696:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000698:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <MX_FDCAN1_Init+0x84>)
 800069a:	2201      	movs	r2, #1
 800069c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 63;
 800069e:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_FDCAN1_Init+0x84>)
 80006a0:	223f      	movs	r2, #63	; 0x3f
 80006a2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 80006a4:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <MX_FDCAN1_Init+0x84>)
 80006a6:	2210      	movs	r2, #16
 80006a8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_FDCAN1_Init+0x84>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80006b0:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <MX_FDCAN1_Init+0x84>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_FDCAN1_Init+0x84>)
 80006b8:	2205      	movs	r2, #5
 80006ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80006bc:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <MX_FDCAN1_Init+0x84>)
 80006be:	2204      	movs	r2, #4
 80006c0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_FDCAN1_Init+0x84>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <MX_FDCAN1_Init+0x84>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_FDCAN1_Init+0x84>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <MX_FDCAN1_Init+0x84>)
 80006d6:	f000 fbe1 	bl	8000e9c <HAL_FDCAN_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80006e0:	f000 f912 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200000b4 	.word	0x200000b4
 80006ec:	40006400 	.word	0x40006400

080006f0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <MX_LPUART1_UART_Init+0x84>)
 80006f6:	4a20      	ldr	r2, [pc, #128]	; (8000778 <MX_LPUART1_UART_Init+0x88>)
 80006f8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006fa:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <MX_LPUART1_UART_Init+0x84>)
 80006fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000700:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <MX_LPUART1_UART_Init+0x84>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <MX_LPUART1_UART_Init+0x84>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800070e:	4b19      	ldr	r3, [pc, #100]	; (8000774 <MX_LPUART1_UART_Init+0x84>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b17      	ldr	r3, [pc, #92]	; (8000774 <MX_LPUART1_UART_Init+0x84>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b16      	ldr	r3, [pc, #88]	; (8000774 <MX_LPUART1_UART_Init+0x84>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_LPUART1_UART_Init+0x84>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000726:	4b13      	ldr	r3, [pc, #76]	; (8000774 <MX_LPUART1_UART_Init+0x84>)
 8000728:	2200      	movs	r2, #0
 800072a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800072c:	4811      	ldr	r0, [pc, #68]	; (8000774 <MX_LPUART1_UART_Init+0x84>)
 800072e:	f002 f8fb 	bl	8002928 <HAL_UART_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000738:	f000 f8e6 	bl	8000908 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800073c:	2100      	movs	r1, #0
 800073e:	480d      	ldr	r0, [pc, #52]	; (8000774 <MX_LPUART1_UART_Init+0x84>)
 8000740:	f002 fdb7 	bl	80032b2 <HAL_UARTEx_SetTxFifoThreshold>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_LPUART1_UART_Init+0x5e>
  {
    Error_Handler();
 800074a:	f000 f8dd 	bl	8000908 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800074e:	2100      	movs	r1, #0
 8000750:	4808      	ldr	r0, [pc, #32]	; (8000774 <MX_LPUART1_UART_Init+0x84>)
 8000752:	f002 fdec 	bl	800332e <HAL_UARTEx_SetRxFifoThreshold>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_LPUART1_UART_Init+0x70>
  {
    Error_Handler();
 800075c:	f000 f8d4 	bl	8000908 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000760:	4804      	ldr	r0, [pc, #16]	; (8000774 <MX_LPUART1_UART_Init+0x84>)
 8000762:	f002 fd6d 	bl	8003240 <HAL_UARTEx_DisableFifoMode>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_LPUART1_UART_Init+0x80>
  {
    Error_Handler();
 800076c:	f000 f8cc 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000028 	.word	0x20000028
 8000778:	40008000 	.word	0x40008000

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	4b2f      	ldr	r3, [pc, #188]	; (8000850 <MX_GPIO_Init+0xd4>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	4a2e      	ldr	r2, [pc, #184]	; (8000850 <MX_GPIO_Init+0xd4>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079e:	4b2c      	ldr	r3, [pc, #176]	; (8000850 <MX_GPIO_Init+0xd4>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007aa:	4b29      	ldr	r3, [pc, #164]	; (8000850 <MX_GPIO_Init+0xd4>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	4a28      	ldr	r2, [pc, #160]	; (8000850 <MX_GPIO_Init+0xd4>)
 80007b0:	f043 0320 	orr.w	r3, r3, #32
 80007b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b6:	4b26      	ldr	r3, [pc, #152]	; (8000850 <MX_GPIO_Init+0xd4>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	f003 0320 	and.w	r3, r3, #32
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b23      	ldr	r3, [pc, #140]	; (8000850 <MX_GPIO_Init+0xd4>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4a22      	ldr	r2, [pc, #136]	; (8000850 <MX_GPIO_Init+0xd4>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ce:	4b20      	ldr	r3, [pc, #128]	; (8000850 <MX_GPIO_Init+0xd4>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <MX_GPIO_Init+0xd4>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	4a1c      	ldr	r2, [pc, #112]	; (8000850 <MX_GPIO_Init+0xd4>)
 80007e0:	f043 0302 	orr.w	r3, r3, #2
 80007e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e6:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_GPIO_Init+0xd4>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	f003 0302 	and.w	r3, r3, #2
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2120      	movs	r1, #32
 80007f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fa:	f001 f80b 	bl	8001814 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000804:	4b13      	ldr	r3, [pc, #76]	; (8000854 <MX_GPIO_Init+0xd8>)
 8000806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4619      	mov	r1, r3
 8000812:	4811      	ldr	r0, [pc, #68]	; (8000858 <MX_GPIO_Init+0xdc>)
 8000814:	f000 fe7c 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000818:	2320      	movs	r3, #32
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	2301      	movs	r3, #1
 800081e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4619      	mov	r1, r3
 800082e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000832:	f000 fe6d 	bl	8001510 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	2100      	movs	r1, #0
 800083a:	2028      	movs	r0, #40	; 0x28
 800083c:	f000 faf9 	bl	8000e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000840:	2028      	movs	r0, #40	; 0x28
 8000842:	f000 fb10 	bl	8000e66 <HAL_NVIC_EnableIRQ>

}
 8000846:	bf00      	nop
 8000848:	3728      	adds	r7, #40	; 0x28
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40021000 	.word	0x40021000
 8000854:	10110000 	.word	0x10110000
 8000858:	48000800 	.word	0x48000800

0800085c <FDCAN_Config>:

/* USER CODE BEGIN 4 */
static void FDCAN_Config(void){
 800085c:	b580      	push	{r7, lr}
 800085e:	b088      	sub	sp, #32
 8000860:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef sFilterConfig;

	  /* Configure Rx filter */
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]
	  sFilterConfig.FilterIndex = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800086a:	2302      	movs	r3, #2
 800086c:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800086e:	2301      	movs	r3, #1
 8000870:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterID1 = 0x321;
 8000872:	f240 3321 	movw	r3, #801	; 0x321
 8000876:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterID2 = 0x7FF;
 8000878:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800087c:	617b      	str	r3, [r7, #20]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 800087e:	463b      	mov	r3, r7
 8000880:	4619      	mov	r1, r3
 8000882:	481f      	ldr	r0, [pc, #124]	; (8000900 <FDCAN_Config+0xa4>)
 8000884:	f000 fc64 	bl	8001150 <HAL_FDCAN_ConfigFilter>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <FDCAN_Config+0x36>
	  {
	    Error_Handler();
 800088e:	f000 f83b 	bl	8000908 <Error_Handler>
	  }

	  /* Configure global filter:
	     Filter all remote frames with STD and EXT ID
	     Reject non matching frames with STD ID and EXT ID */
	  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 8000892:	2300      	movs	r3, #0
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	2300      	movs	r3, #0
 8000898:	2202      	movs	r2, #2
 800089a:	2102      	movs	r1, #2
 800089c:	4818      	ldr	r0, [pc, #96]	; (8000900 <FDCAN_Config+0xa4>)
 800089e:	f000 fcb1 	bl	8001204 <HAL_FDCAN_ConfigGlobalFilter>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <FDCAN_Config+0x50>
	  {
	    Error_Handler();
 80008a8:	f000 f82e 	bl	8000908 <Error_Handler>
	  }
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80008ac:	4814      	ldr	r0, [pc, #80]	; (8000900 <FDCAN_Config+0xa4>)
 80008ae:	f000 fcda 	bl	8001266 <HAL_FDCAN_Start>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <FDCAN_Config+0x60>
	  {
	    Error_Handler();
 80008b8:	f000 f826 	bl	8000908 <Error_Handler>
	  }
	  TxHeader.Identifier = 0x321;
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <FDCAN_Config+0xa8>)
 80008be:	f240 3221 	movw	r2, #801	; 0x321
 80008c2:	601a      	str	r2, [r3, #0]
	  TxHeader.IdType = FDCAN_STANDARD_ID;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <FDCAN_Config+0xa8>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	605a      	str	r2, [r3, #4]
	  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <FDCAN_Config+0xa8>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
	  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <FDCAN_Config+0xa8>)
 80008d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80008d6:	60da      	str	r2, [r3, #12]
	  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80008d8:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <FDCAN_Config+0xa8>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
	  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <FDCAN_Config+0xa8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	615a      	str	r2, [r3, #20]
	  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <FDCAN_Config+0xa8>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	619a      	str	r2, [r3, #24]
	  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <FDCAN_Config+0xa8>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	61da      	str	r2, [r3, #28]
	  TxHeader.MessageMarker = 0;
 80008f0:	4b04      	ldr	r3, [pc, #16]	; (8000904 <FDCAN_Config+0xa8>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	621a      	str	r2, [r3, #32]

}
 80008f6:	bf00      	nop
 80008f8:	3718      	adds	r7, #24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200000b4 	.word	0x200000b4
 8000904:	20000128 	.word	0x20000128

08000908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
	...

08000918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <HAL_MspInit+0x44>)
 8000920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000922:	4a0e      	ldr	r2, [pc, #56]	; (800095c <HAL_MspInit+0x44>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6613      	str	r3, [r2, #96]	; 0x60
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <HAL_MspInit+0x44>)
 800092c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <HAL_MspInit+0x44>)
 8000938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093a:	4a08      	ldr	r2, [pc, #32]	; (800095c <HAL_MspInit+0x44>)
 800093c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000940:	6593      	str	r3, [r2, #88]	; 0x58
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_MspInit+0x44>)
 8000944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800094e:	f001 f85b 	bl	8001a08 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40021000 	.word	0x40021000

08000960 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	; 0x28
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a18      	ldr	r2, [pc, #96]	; (80009e0 <HAL_FDCAN_MspInit+0x80>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d129      	bne.n	80009d6 <HAL_FDCAN_MspInit+0x76>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000982:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <HAL_FDCAN_MspInit+0x84>)
 8000984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000986:	4a17      	ldr	r2, [pc, #92]	; (80009e4 <HAL_FDCAN_MspInit+0x84>)
 8000988:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800098c:	6593      	str	r3, [r2, #88]	; 0x58
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <HAL_FDCAN_MspInit+0x84>)
 8000990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <HAL_FDCAN_MspInit+0x84>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	4a11      	ldr	r2, [pc, #68]	; (80009e4 <HAL_FDCAN_MspInit+0x84>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <HAL_FDCAN_MspInit+0x84>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009b2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80009c4:	2309      	movs	r3, #9
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d2:	f000 fd9d 	bl	8001510 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80009d6:	bf00      	nop
 80009d8:	3728      	adds	r7, #40	; 0x28
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40006400 	.word	0x40006400
 80009e4:	40021000 	.word	0x40021000

080009e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	; 0x28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a17      	ldr	r2, [pc, #92]	; (8000a64 <HAL_UART_MspInit+0x7c>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d128      	bne.n	8000a5c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <HAL_UART_MspInit+0x80>)
 8000a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a0e:	4a16      	ldr	r2, [pc, #88]	; (8000a68 <HAL_UART_MspInit+0x80>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <HAL_UART_MspInit+0x80>)
 8000a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <HAL_UART_MspInit+0x80>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	4a10      	ldr	r2, [pc, #64]	; (8000a68 <HAL_UART_MspInit+0x80>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <HAL_UART_MspInit+0x80>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000a3a:	230c      	movs	r3, #12
 8000a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000a4a:	230c      	movs	r3, #12
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a58:	f000 fd5a 	bl	8001510 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000a5c:	bf00      	nop
 8000a5e:	3728      	adds	r7, #40	; 0x28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40008000 	.word	0x40008000
 8000a68:	40021000 	.word	0x40021000

08000a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <HardFault_Handler+0x4>

08000a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <MemManage_Handler+0x4>

08000a86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <BusFault_Handler+0x4>

08000a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <UsageFault_Handler+0x4>

08000a92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac0:	f000 f89c 	bl	8000bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000acc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ad0:	f000 fed2 	bl	8001878 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <SystemInit+0x28>)
 8000ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ae2:	4a07      	ldr	r2, [pc, #28]	; (8000b00 <SystemInit+0x28>)
 8000ae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000aec:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <SystemInit+0x28>)
 8000aee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000af2:	609a      	str	r2, [r3, #8]
#endif
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b04:	480d      	ldr	r0, [pc, #52]	; (8000b3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b06:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b08:	480d      	ldr	r0, [pc, #52]	; (8000b40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b0a:	490e      	ldr	r1, [pc, #56]	; (8000b44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b0c:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <LoopForever+0xe>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b20:	4c0b      	ldr	r4, [pc, #44]	; (8000b50 <LoopForever+0x16>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b2e:	f7ff ffd3 	bl	8000ad8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b32:	f002 fca3 	bl	800347c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b36:	f7ff fcef 	bl	8000518 <main>

08000b3a <LoopForever>:

LoopForever:
    b LoopForever
 8000b3a:	e7fe      	b.n	8000b3a <LoopForever>
  ldr   r0, =_estack
 8000b3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b48:	0800354c 	.word	0x0800354c
  ldr r2, =_sbss
 8000b4c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b50:	20000178 	.word	0x20000178

08000b54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC1_2_IRQHandler>

08000b56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b60:	2003      	movs	r0, #3
 8000b62:	f000 f95b 	bl	8000e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b66:	2000      	movs	r0, #0
 8000b68:	f000 f80e 	bl	8000b88 <HAL_InitTick>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d002      	beq.n	8000b78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	71fb      	strb	r3, [r7, #7]
 8000b76:	e001      	b.n	8000b7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b78:	f7ff fece 	bl	8000918 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b7c:	79fb      	ldrb	r3, [r7, #7]

}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b90:	2300      	movs	r3, #0
 8000b92:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b94:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <HAL_InitTick+0x68>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d022      	beq.n	8000be2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <HAL_InitTick+0x6c>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <HAL_InitTick+0x68>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ba8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 f966 	bl	8000e82 <HAL_SYSTICK_Config>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d10f      	bne.n	8000bdc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b0f      	cmp	r3, #15
 8000bc0:	d809      	bhi.n	8000bd6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	6879      	ldr	r1, [r7, #4]
 8000bc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bca:	f000 f932 	bl	8000e32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <HAL_InitTick+0x70>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6013      	str	r3, [r2, #0]
 8000bd4:	e007      	b.n	8000be6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	73fb      	strb	r3, [r7, #15]
 8000bda:	e004      	b.n	8000be6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	73fb      	strb	r3, [r7, #15]
 8000be0:	e001      	b.n	8000be6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	20000000 	.word	0x20000000
 8000bf8:	20000004 	.word	0x20000004

08000bfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <HAL_IncTick+0x1c>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <HAL_IncTick+0x20>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4413      	add	r3, r2
 8000c0a:	4a03      	ldr	r2, [pc, #12]	; (8000c18 <HAL_IncTick+0x1c>)
 8000c0c:	6013      	str	r3, [r2, #0]
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	20000174 	.word	0x20000174
 8000c1c:	20000008 	.word	0x20000008

08000c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return uwTick;
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <HAL_GetTick+0x14>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000174 	.word	0x20000174

08000c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c40:	f7ff ffee 	bl	8000c20 <HAL_GetTick>
 8000c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c50:	d004      	beq.n	8000c5c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <HAL_Delay+0x40>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	4413      	add	r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c5c:	bf00      	nop
 8000c5e:	f7ff ffdf 	bl	8000c20 <HAL_GetTick>
 8000c62:	4602      	mov	r2, r0
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d8f7      	bhi.n	8000c5e <HAL_Delay+0x26>
  {
  }
}
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000008 	.word	0x20000008

08000c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cae:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	60d3      	str	r3, [r2, #12]
}
 8000cb4:	bf00      	nop
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <__NVIC_GetPriorityGrouping+0x18>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	0a1b      	lsrs	r3, r3, #8
 8000cce:	f003 0307 	and.w	r3, r3, #7
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	db0b      	blt.n	8000d0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	f003 021f 	and.w	r2, r3, #31
 8000cf8:	4907      	ldr	r1, [pc, #28]	; (8000d18 <__NVIC_EnableIRQ+0x38>)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	095b      	lsrs	r3, r3, #5
 8000d00:	2001      	movs	r0, #1
 8000d02:	fa00 f202 	lsl.w	r2, r0, r2
 8000d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000e100 	.word	0xe000e100

08000d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	6039      	str	r1, [r7, #0]
 8000d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	db0a      	blt.n	8000d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	490c      	ldr	r1, [pc, #48]	; (8000d68 <__NVIC_SetPriority+0x4c>)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	0112      	lsls	r2, r2, #4
 8000d3c:	b2d2      	uxtb	r2, r2
 8000d3e:	440b      	add	r3, r1
 8000d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d44:	e00a      	b.n	8000d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4908      	ldr	r1, [pc, #32]	; (8000d6c <__NVIC_SetPriority+0x50>)
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	f003 030f 	and.w	r3, r3, #15
 8000d52:	3b04      	subs	r3, #4
 8000d54:	0112      	lsls	r2, r2, #4
 8000d56:	b2d2      	uxtb	r2, r2
 8000d58:	440b      	add	r3, r1
 8000d5a:	761a      	strb	r2, [r3, #24]
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000e100 	.word	0xe000e100
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b089      	sub	sp, #36	; 0x24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f003 0307 	and.w	r3, r3, #7
 8000d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f1c3 0307 	rsb	r3, r3, #7
 8000d8a:	2b04      	cmp	r3, #4
 8000d8c:	bf28      	it	cs
 8000d8e:	2304      	movcs	r3, #4
 8000d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3304      	adds	r3, #4
 8000d96:	2b06      	cmp	r3, #6
 8000d98:	d902      	bls.n	8000da0 <NVIC_EncodePriority+0x30>
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3b03      	subs	r3, #3
 8000d9e:	e000      	b.n	8000da2 <NVIC_EncodePriority+0x32>
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43da      	mvns	r2, r3
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	401a      	ands	r2, r3
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc2:	43d9      	mvns	r1, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	4313      	orrs	r3, r2
         );
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3724      	adds	r7, #36	; 0x24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
	...

08000dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000de8:	d301      	bcc.n	8000dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00f      	b.n	8000e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dee:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <SysTick_Config+0x40>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df6:	210f      	movs	r1, #15
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dfc:	f7ff ff8e 	bl	8000d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <SysTick_Config+0x40>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e06:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <SysTick_Config+0x40>)
 8000e08:	2207      	movs	r2, #7
 8000e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	e000e010 	.word	0xe000e010

08000e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff ff29 	bl	8000c7c <__NVIC_SetPriorityGrouping>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b086      	sub	sp, #24
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4603      	mov	r3, r0
 8000e3a:	60b9      	str	r1, [r7, #8]
 8000e3c:	607a      	str	r2, [r7, #4]
 8000e3e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e40:	f7ff ff40 	bl	8000cc4 <__NVIC_GetPriorityGrouping>
 8000e44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	68b9      	ldr	r1, [r7, #8]
 8000e4a:	6978      	ldr	r0, [r7, #20]
 8000e4c:	f7ff ff90 	bl	8000d70 <NVIC_EncodePriority>
 8000e50:	4602      	mov	r2, r0
 8000e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e56:	4611      	mov	r1, r2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff5f 	bl	8000d1c <__NVIC_SetPriority>
}
 8000e5e:	bf00      	nop
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff33 	bl	8000ce0 <__NVIC_EnableIRQ>
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff ffa4 	bl	8000dd8 <SysTick_Config>
 8000e90:	4603      	mov	r3, r0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d101      	bne.n	8000eae <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e147      	b.n	800113e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d106      	bne.n	8000ec8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff fd4c 	bl	8000960 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	699a      	ldr	r2, [r3, #24]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f022 0210 	bic.w	r2, r2, #16
 8000ed6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ed8:	f7ff fea2 	bl	8000c20 <HAL_GetTick>
 8000edc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000ede:	e012      	b.n	8000f06 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000ee0:	f7ff fe9e 	bl	8000c20 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b0a      	cmp	r3, #10
 8000eec:	d90b      	bls.n	8000f06 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef2:	f043 0201 	orr.w	r2, r3, #1
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2203      	movs	r2, #3
 8000efe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e11b      	b.n	800113e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	f003 0308 	and.w	r3, r3, #8
 8000f10:	2b08      	cmp	r3, #8
 8000f12:	d0e5      	beq.n	8000ee0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	699a      	ldr	r2, [r3, #24]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f042 0201 	orr.w	r2, r2, #1
 8000f22:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f24:	f7ff fe7c 	bl	8000c20 <HAL_GetTick>
 8000f28:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000f2a:	e012      	b.n	8000f52 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000f2c:	f7ff fe78 	bl	8000c20 <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b0a      	cmp	r3, #10
 8000f38:	d90b      	bls.n	8000f52 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3e:	f043 0201 	orr.w	r2, r3, #1
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2203      	movs	r2, #3
 8000f4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e0f5      	b.n	800113e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d0e5      	beq.n	8000f2c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	699a      	ldr	r2, [r3, #24]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f042 0202 	orr.w	r2, r2, #2
 8000f6e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a74      	ldr	r2, [pc, #464]	; (8001148 <HAL_FDCAN_Init+0x2ac>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d103      	bne.n	8000f82 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000f7a:	4a74      	ldr	r2, [pc, #464]	; (800114c <HAL_FDCAN_Init+0x2b0>)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	7c1b      	ldrb	r3, [r3, #16]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d108      	bne.n	8000f9c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	699a      	ldr	r2, [r3, #24]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f98:	619a      	str	r2, [r3, #24]
 8000f9a:	e007      	b.n	8000fac <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	699a      	ldr	r2, [r3, #24]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000faa:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	7c5b      	ldrb	r3, [r3, #17]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d108      	bne.n	8000fc6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	699a      	ldr	r2, [r3, #24]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000fc2:	619a      	str	r2, [r3, #24]
 8000fc4:	e007      	b.n	8000fd6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	699a      	ldr	r2, [r3, #24]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000fd4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	7c9b      	ldrb	r3, [r3, #18]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d108      	bne.n	8000ff0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	699a      	ldr	r2, [r3, #24]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000fec:	619a      	str	r2, [r3, #24]
 8000fee:	e007      	b.n	8001000 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	699a      	ldr	r2, [r3, #24]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000ffe:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689a      	ldr	r2, [r3, #8]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	430a      	orrs	r2, r1
 8001014:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	699a      	ldr	r2, [r3, #24]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001024:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	691a      	ldr	r2, [r3, #16]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0210 	bic.w	r2, r2, #16
 8001034:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d108      	bne.n	8001050 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	699a      	ldr	r2, [r3, #24]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f042 0204 	orr.w	r2, r2, #4
 800104c:	619a      	str	r2, [r3, #24]
 800104e:	e02c      	b.n	80010aa <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d028      	beq.n	80010aa <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d01c      	beq.n	800109a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	699a      	ldr	r2, [r3, #24]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800106e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	691a      	ldr	r2, [r3, #16]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f042 0210 	orr.w	r2, r2, #16
 800107e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	2b03      	cmp	r3, #3
 8001086:	d110      	bne.n	80010aa <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	699a      	ldr	r2, [r3, #24]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f042 0220 	orr.w	r2, r2, #32
 8001096:	619a      	str	r2, [r3, #24]
 8001098:	e007      	b.n	80010aa <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	699a      	ldr	r2, [r3, #24]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f042 0220 	orr.w	r2, r2, #32
 80010a8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010ba:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a1b      	ldr	r3, [r3, #32]
 80010c0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80010c2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80010d2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010d4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80010de:	d115      	bne.n	800110c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ea:	3b01      	subs	r3, #1
 80010ec:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80010ee:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f4:	3b01      	subs	r3, #1
 80010f6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80010f8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001100:	3b01      	subs	r3, #1
 8001102:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001108:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800110a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	430a      	orrs	r2, r1
 800111e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 f90c 	bl	8001340 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2201      	movs	r2, #1
 8001138:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40006400 	.word	0x40006400
 800114c:	40006500 	.word	0x40006500

08001150 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001150:	b480      	push	{r7}
 8001152:	b087      	sub	sp, #28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001160:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001162:	7dfb      	ldrb	r3, [r7, #23]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d002      	beq.n	800116e <HAL_FDCAN_ConfigFilter+0x1e>
 8001168:	7dfb      	ldrb	r3, [r7, #23]
 800116a:	2b02      	cmp	r3, #2
 800116c:	d13d      	bne.n	80011ea <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d119      	bne.n	80011aa <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001182:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800118a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	e01d      	b.n	80011e6 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	075a      	lsls	r2, r3, #29
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	079a      	lsls	r2, r3, #30
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	4413      	add	r3, r2
 80011d2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	3304      	adds	r3, #4
 80011de:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80011e6:	2300      	movs	r3, #0
 80011e8:	e006      	b.n	80011f8 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ee:	f043 0202 	orr.w	r2, r3, #2
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
  }
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	371c      	adds	r7, #28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
 8001210:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b01      	cmp	r3, #1
 800121c:	d116      	bne.n	800124c <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001226:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	011a      	lsls	r2, r3, #4
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	431a      	orrs	r2, r3
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	431a      	orrs	r2, r3
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	431a      	orrs	r2, r3
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	430a      	orrs	r2, r1
 8001244:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8001248:	2300      	movs	r3, #0
 800124a:	e006      	b.n	800125a <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001250:	f043 0204 	orr.w	r2, r3, #4
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
  }
}
 800125a:	4618      	mov	r0, r3
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b01      	cmp	r3, #1
 8001278:	d110      	bne.n	800129c <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2202      	movs	r2, #2
 800127e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	699a      	ldr	r2, [r3, #24]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f022 0201 	bic.w	r2, r2, #1
 8001290:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001298:	2300      	movs	r3, #0
 800129a:	e006      	b.n	80012aa <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a0:	f043 0204 	orr.w	r2, r3, #4
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
  }
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b086      	sub	sp, #24
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	60f8      	str	r0, [r7, #12]
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d12c      	bne.n	8001328 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80012d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d007      	beq.n	80012ee <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e023      	b.n	8001336 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80012f6:	0c1b      	lsrs	r3, r3, #16
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	68b9      	ldr	r1, [r7, #8]
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	f000 f887 	bl	8001418 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2101      	movs	r1, #1
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	fa01 f202 	lsl.w	r2, r1, r2
 8001316:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800131a:	2201      	movs	r2, #1
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	409a      	lsls	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	e006      	b.n	8001336 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800132c:	f043 0208 	orr.w	r2, r3, #8
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
  }
}
 8001336:	4618      	mov	r0, r3
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001348:	4b30      	ldr	r3, [pc, #192]	; (800140c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800134a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a2f      	ldr	r2, [pc, #188]	; (8001410 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d103      	bne.n	800135e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800135c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a2c      	ldr	r2, [pc, #176]	; (8001414 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d103      	bne.n	8001370 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 800136e:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68ba      	ldr	r2, [r7, #8]
 8001374:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800137e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001386:	041a      	lsls	r2, r3, #16
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	430a      	orrs	r2, r1
 800138e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013a4:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ac:	061a      	lsls	r2, r3, #24
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	e005      	b.n	80013f2 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	3304      	adds	r3, #4
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d3f3      	bcc.n	80013e6 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80013fe:	bf00      	nop
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	4000a400 	.word	0x4000a400
 8001410:	40006800 	.word	0x40006800
 8001414:	40006c00 	.word	0x40006c00

08001418 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	; 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
 8001424:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10a      	bne.n	8001444 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001436:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800143e:	4313      	orrs	r3, r2
 8001440:	61fb      	str	r3, [r7, #28]
 8001442:	e00a      	b.n	800145a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800144c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001452:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001454:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001458:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	6a1b      	ldr	r3, [r3, #32]
 800145e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001464:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800146a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001470:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001476:	4313      	orrs	r3, r2
 8001478:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	4613      	mov	r3, r2
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	4413      	add	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	440b      	add	r3, r1
 800148a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	69fa      	ldr	r2, [r7, #28]
 8001490:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	3304      	adds	r3, #4
 8001496:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	3304      	adds	r3, #4
 80014a2:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	e020      	b.n	80014ec <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	3303      	adds	r3, #3
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	3302      	adds	r3, #2
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	440b      	add	r3, r1
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80014c2:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	3301      	adds	r3, #1
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	440b      	add	r3, r1
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80014d0:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	697a      	ldr	r2, [r7, #20]
 80014d6:	440a      	add	r2, r1
 80014d8:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80014da:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	3304      	adds	r3, #4
 80014e4:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3304      	adds	r3, #4
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	0c1b      	lsrs	r3, r3, #16
 80014f2:	4a06      	ldr	r2, [pc, #24]	; (800150c <FDCAN_CopyMessageToRAM+0xf4>)
 80014f4:	5cd3      	ldrb	r3, [r2, r3]
 80014f6:	461a      	mov	r2, r3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d3d5      	bcc.n	80014aa <FDCAN_CopyMessageToRAM+0x92>
  }
}
 80014fe:	bf00      	nop
 8001500:	3724      	adds	r7, #36	; 0x24
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	08003514 	.word	0x08003514

08001510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001510:	b480      	push	{r7}
 8001512:	b087      	sub	sp, #28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800151e:	e15a      	b.n	80017d6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	2101      	movs	r1, #1
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	fa01 f303 	lsl.w	r3, r1, r3
 800152c:	4013      	ands	r3, r2
 800152e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2b00      	cmp	r3, #0
 8001534:	f000 814c 	beq.w	80017d0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d00b      	beq.n	8001558 <HAL_GPIO_Init+0x48>
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d007      	beq.n	8001558 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800154c:	2b11      	cmp	r3, #17
 800154e:	d003      	beq.n	8001558 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b12      	cmp	r3, #18
 8001556:	d130      	bne.n	80015ba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	2203      	movs	r2, #3
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4013      	ands	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	68da      	ldr	r2, [r3, #12]
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4313      	orrs	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800158e:	2201      	movs	r2, #1
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4013      	ands	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	091b      	lsrs	r3, r3, #4
 80015a4:	f003 0201 	and.w	r2, r3, #1
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	2203      	movs	r2, #3
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4013      	ands	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0xea>
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b12      	cmp	r3, #18
 80015f8:	d123      	bne.n	8001642 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	08da      	lsrs	r2, r3, #3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3208      	adds	r2, #8
 8001602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001606:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	220f      	movs	r2, #15
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	4013      	ands	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	691a      	ldr	r2, [r3, #16]
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	f003 0307 	and.w	r3, r3, #7
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	08da      	lsrs	r2, r3, #3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3208      	adds	r2, #8
 800163c:	6939      	ldr	r1, [r7, #16]
 800163e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	2203      	movs	r2, #3
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4013      	ands	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 0203 	and.w	r2, r3, #3
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 80a6 	beq.w	80017d0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001684:	4b5b      	ldr	r3, [pc, #364]	; (80017f4 <HAL_GPIO_Init+0x2e4>)
 8001686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001688:	4a5a      	ldr	r2, [pc, #360]	; (80017f4 <HAL_GPIO_Init+0x2e4>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6613      	str	r3, [r2, #96]	; 0x60
 8001690:	4b58      	ldr	r3, [pc, #352]	; (80017f4 <HAL_GPIO_Init+0x2e4>)
 8001692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800169c:	4a56      	ldr	r2, [pc, #344]	; (80017f8 <HAL_GPIO_Init+0x2e8>)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	089b      	lsrs	r3, r3, #2
 80016a2:	3302      	adds	r3, #2
 80016a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	220f      	movs	r2, #15
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4013      	ands	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016c6:	d01f      	beq.n	8001708 <HAL_GPIO_Init+0x1f8>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a4c      	ldr	r2, [pc, #304]	; (80017fc <HAL_GPIO_Init+0x2ec>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d019      	beq.n	8001704 <HAL_GPIO_Init+0x1f4>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a4b      	ldr	r2, [pc, #300]	; (8001800 <HAL_GPIO_Init+0x2f0>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d013      	beq.n	8001700 <HAL_GPIO_Init+0x1f0>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a4a      	ldr	r2, [pc, #296]	; (8001804 <HAL_GPIO_Init+0x2f4>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d00d      	beq.n	80016fc <HAL_GPIO_Init+0x1ec>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a49      	ldr	r2, [pc, #292]	; (8001808 <HAL_GPIO_Init+0x2f8>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d007      	beq.n	80016f8 <HAL_GPIO_Init+0x1e8>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a48      	ldr	r2, [pc, #288]	; (800180c <HAL_GPIO_Init+0x2fc>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d101      	bne.n	80016f4 <HAL_GPIO_Init+0x1e4>
 80016f0:	2305      	movs	r3, #5
 80016f2:	e00a      	b.n	800170a <HAL_GPIO_Init+0x1fa>
 80016f4:	2306      	movs	r3, #6
 80016f6:	e008      	b.n	800170a <HAL_GPIO_Init+0x1fa>
 80016f8:	2304      	movs	r3, #4
 80016fa:	e006      	b.n	800170a <HAL_GPIO_Init+0x1fa>
 80016fc:	2303      	movs	r3, #3
 80016fe:	e004      	b.n	800170a <HAL_GPIO_Init+0x1fa>
 8001700:	2302      	movs	r3, #2
 8001702:	e002      	b.n	800170a <HAL_GPIO_Init+0x1fa>
 8001704:	2301      	movs	r3, #1
 8001706:	e000      	b.n	800170a <HAL_GPIO_Init+0x1fa>
 8001708:	2300      	movs	r3, #0
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	f002 0203 	and.w	r2, r2, #3
 8001710:	0092      	lsls	r2, r2, #2
 8001712:	4093      	lsls	r3, r2
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4313      	orrs	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800171a:	4937      	ldr	r1, [pc, #220]	; (80017f8 <HAL_GPIO_Init+0x2e8>)
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	089b      	lsrs	r3, r3, #2
 8001720:	3302      	adds	r3, #2
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001728:	4b39      	ldr	r3, [pc, #228]	; (8001810 <HAL_GPIO_Init+0x300>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	43db      	mvns	r3, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4013      	ands	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	4313      	orrs	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800174c:	4a30      	ldr	r2, [pc, #192]	; (8001810 <HAL_GPIO_Init+0x300>)
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001752:	4b2f      	ldr	r3, [pc, #188]	; (8001810 <HAL_GPIO_Init+0x300>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	43db      	mvns	r3, r3
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4013      	ands	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4313      	orrs	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001776:	4a26      	ldr	r2, [pc, #152]	; (8001810 <HAL_GPIO_Init+0x300>)
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800177c:	4b24      	ldr	r3, [pc, #144]	; (8001810 <HAL_GPIO_Init+0x300>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43db      	mvns	r3, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017a0:	4a1b      	ldr	r2, [pc, #108]	; (8001810 <HAL_GPIO_Init+0x300>)
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017a6:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <HAL_GPIO_Init+0x300>)
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	43db      	mvns	r3, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017ca:	4a11      	ldr	r2, [pc, #68]	; (8001810 <HAL_GPIO_Init+0x300>)
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	3301      	adds	r3, #1
 80017d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	fa22 f303 	lsr.w	r3, r2, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f47f ae9d 	bne.w	8001520 <HAL_GPIO_Init+0x10>
  }
}
 80017e6:	bf00      	nop
 80017e8:	371c      	adds	r7, #28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40010000 	.word	0x40010000
 80017fc:	48000400 	.word	0x48000400
 8001800:	48000800 	.word	0x48000800
 8001804:	48000c00 	.word	0x48000c00
 8001808:	48001000 	.word	0x48001000
 800180c:	48001400 	.word	0x48001400
 8001810:	40010400 	.word	0x40010400

08001814 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	807b      	strh	r3, [r7, #2]
 8001820:	4613      	mov	r3, r2
 8001822:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001824:	787b      	ldrb	r3, [r7, #1]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800182a:	887a      	ldrh	r2, [r7, #2]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001830:	e002      	b.n	8001838 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001832:	887a      	ldrh	r2, [r7, #2]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001856:	887a      	ldrh	r2, [r7, #2]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4013      	ands	r3, r2
 800185c:	041a      	lsls	r2, r3, #16
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	43d9      	mvns	r1, r3
 8001862:	887b      	ldrh	r3, [r7, #2]
 8001864:	400b      	ands	r3, r1
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	619a      	str	r2, [r3, #24]
}
 800186c:	bf00      	nop
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001882:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001884:	695a      	ldr	r2, [r3, #20]
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	4013      	ands	r3, r2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d006      	beq.n	800189c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800188e:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001890:	88fb      	ldrh	r3, [r7, #6]
 8001892:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	4618      	mov	r0, r3
 8001898:	f000 f806 	bl	80018a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40010400 	.word	0x40010400

080018a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d141      	bne.n	8001952 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018ce:	4b4b      	ldr	r3, [pc, #300]	; (80019fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018da:	d131      	bne.n	8001940 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018dc:	4b47      	ldr	r3, [pc, #284]	; (80019fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018e2:	4a46      	ldr	r2, [pc, #280]	; (80019fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018ec:	4b43      	ldr	r3, [pc, #268]	; (80019fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018f4:	4a41      	ldr	r2, [pc, #260]	; (80019fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018fc:	4b40      	ldr	r3, [pc, #256]	; (8001a00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2232      	movs	r2, #50	; 0x32
 8001902:	fb02 f303 	mul.w	r3, r2, r3
 8001906:	4a3f      	ldr	r2, [pc, #252]	; (8001a04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001908:	fba2 2303 	umull	r2, r3, r2, r3
 800190c:	0c9b      	lsrs	r3, r3, #18
 800190e:	3301      	adds	r3, #1
 8001910:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001912:	e002      	b.n	800191a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	3b01      	subs	r3, #1
 8001918:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800191a:	4b38      	ldr	r3, [pc, #224]	; (80019fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001926:	d102      	bne.n	800192e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f2      	bne.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800192e:	4b33      	ldr	r3, [pc, #204]	; (80019fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800193a:	d158      	bne.n	80019ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e057      	b.n	80019f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001940:	4b2e      	ldr	r3, [pc, #184]	; (80019fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001942:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001946:	4a2d      	ldr	r2, [pc, #180]	; (80019fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800194c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001950:	e04d      	b.n	80019ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001958:	d141      	bne.n	80019de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800195a:	4b28      	ldr	r3, [pc, #160]	; (80019fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001966:	d131      	bne.n	80019cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001968:	4b24      	ldr	r3, [pc, #144]	; (80019fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800196a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800196e:	4a23      	ldr	r2, [pc, #140]	; (80019fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001974:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001978:	4b20      	ldr	r3, [pc, #128]	; (80019fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001980:	4a1e      	ldr	r2, [pc, #120]	; (80019fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001982:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001986:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001988:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2232      	movs	r2, #50	; 0x32
 800198e:	fb02 f303 	mul.w	r3, r2, r3
 8001992:	4a1c      	ldr	r2, [pc, #112]	; (8001a04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001994:	fba2 2303 	umull	r2, r3, r2, r3
 8001998:	0c9b      	lsrs	r3, r3, #18
 800199a:	3301      	adds	r3, #1
 800199c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800199e:	e002      	b.n	80019a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	3b01      	subs	r3, #1
 80019a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019a6:	4b15      	ldr	r3, [pc, #84]	; (80019fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019b2:	d102      	bne.n	80019ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f2      	bne.n	80019a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019c6:	d112      	bne.n	80019ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e011      	b.n	80019f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019cc:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019d2:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80019dc:	e007      	b.n	80019ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019de:	4b07      	ldr	r3, [pc, #28]	; (80019fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019e6:	4a05      	ldr	r2, [pc, #20]	; (80019fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	40007000 	.word	0x40007000
 8001a00:	20000000 	.word	0x20000000
 8001a04:	431bde83 	.word	0x431bde83

08001a08 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a16:	6093      	str	r3, [r2, #8]
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	40007000 	.word	0x40007000

08001a28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e308      	b.n	800204c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d075      	beq.n	8001b32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a46:	4ba3      	ldr	r3, [pc, #652]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 030c 	and.w	r3, r3, #12
 8001a4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a50:	4ba0      	ldr	r3, [pc, #640]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	2b0c      	cmp	r3, #12
 8001a5e:	d102      	bne.n	8001a66 <HAL_RCC_OscConfig+0x3e>
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	d002      	beq.n	8001a6c <HAL_RCC_OscConfig+0x44>
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	d10b      	bne.n	8001a84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a6c:	4b99      	ldr	r3, [pc, #612]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d05b      	beq.n	8001b30 <HAL_RCC_OscConfig+0x108>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d157      	bne.n	8001b30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e2e3      	b.n	800204c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a8c:	d106      	bne.n	8001a9c <HAL_RCC_OscConfig+0x74>
 8001a8e:	4b91      	ldr	r3, [pc, #580]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a90      	ldr	r2, [pc, #576]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	e01d      	b.n	8001ad8 <HAL_RCC_OscConfig+0xb0>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aa4:	d10c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x98>
 8001aa6:	4b8b      	ldr	r3, [pc, #556]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a8a      	ldr	r2, [pc, #552]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	4b88      	ldr	r3, [pc, #544]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a87      	ldr	r2, [pc, #540]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	e00b      	b.n	8001ad8 <HAL_RCC_OscConfig+0xb0>
 8001ac0:	4b84      	ldr	r3, [pc, #528]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a83      	ldr	r2, [pc, #524]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	4b81      	ldr	r3, [pc, #516]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a80      	ldr	r2, [pc, #512]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d013      	beq.n	8001b08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7ff f89e 	bl	8000c20 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae8:	f7ff f89a 	bl	8000c20 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b64      	cmp	r3, #100	; 0x64
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e2a8      	b.n	800204c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001afa:	4b76      	ldr	r3, [pc, #472]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0xc0>
 8001b06:	e014      	b.n	8001b32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b08:	f7ff f88a 	bl	8000c20 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b10:	f7ff f886 	bl	8000c20 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b64      	cmp	r3, #100	; 0x64
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e294      	b.n	800204c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b22:	4b6c      	ldr	r3, [pc, #432]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f0      	bne.n	8001b10 <HAL_RCC_OscConfig+0xe8>
 8001b2e:	e000      	b.n	8001b32 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d075      	beq.n	8001c2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b3e:	4b65      	ldr	r3, [pc, #404]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 030c 	and.w	r3, r3, #12
 8001b46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b48:	4b62      	ldr	r3, [pc, #392]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	2b0c      	cmp	r3, #12
 8001b56:	d102      	bne.n	8001b5e <HAL_RCC_OscConfig+0x136>
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d002      	beq.n	8001b64 <HAL_RCC_OscConfig+0x13c>
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	d11f      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b64:	4b5b      	ldr	r3, [pc, #364]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <HAL_RCC_OscConfig+0x154>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e267      	b.n	800204c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b7c:	4b55      	ldr	r3, [pc, #340]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	061b      	lsls	r3, r3, #24
 8001b8a:	4952      	ldr	r1, [pc, #328]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b90:	4b51      	ldr	r3, [pc, #324]	; (8001cd8 <HAL_RCC_OscConfig+0x2b0>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe fff7 	bl	8000b88 <HAL_InitTick>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d043      	beq.n	8001c28 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e253      	b.n	800204c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d023      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bac:	4b49      	ldr	r3, [pc, #292]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a48      	ldr	r2, [pc, #288]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb8:	f7ff f832 	bl	8000c20 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc0:	f7ff f82e 	bl	8000c20 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e23c      	b.n	800204c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bd2:	4b40      	ldr	r3, [pc, #256]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bde:	4b3d      	ldr	r3, [pc, #244]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	061b      	lsls	r3, r3, #24
 8001bec:	4939      	ldr	r1, [pc, #228]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	604b      	str	r3, [r1, #4]
 8001bf2:	e01a      	b.n	8001c2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bf4:	4b37      	ldr	r3, [pc, #220]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a36      	ldr	r2, [pc, #216]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001bfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c00:	f7ff f80e 	bl	8000c20 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c08:	f7ff f80a 	bl	8000c20 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e218      	b.n	800204c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c1a:	4b2e      	ldr	r3, [pc, #184]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f0      	bne.n	8001c08 <HAL_RCC_OscConfig+0x1e0>
 8001c26:	e000      	b.n	8001c2a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d03c      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d01c      	beq.n	8001c78 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c3e:	4b25      	ldr	r3, [pc, #148]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c44:	4a23      	ldr	r2, [pc, #140]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c4e:	f7fe ffe7 	bl	8000c20 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c56:	f7fe ffe3 	bl	8000c20 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e1f1      	b.n	800204c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c68:	4b1a      	ldr	r3, [pc, #104]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0ef      	beq.n	8001c56 <HAL_RCC_OscConfig+0x22e>
 8001c76:	e01b      	b.n	8001cb0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c78:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c7e:	4a15      	ldr	r2, [pc, #84]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001c80:	f023 0301 	bic.w	r3, r3, #1
 8001c84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c88:	f7fe ffca 	bl	8000c20 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c90:	f7fe ffc6 	bl	8000c20 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e1d4      	b.n	800204c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ca2:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1ef      	bne.n	8001c90 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 80ab 	beq.w	8001e14 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001cc2:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d106      	bne.n	8001cdc <HAL_RCC_OscConfig+0x2b4>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e005      	b.n	8001cde <HAL_RCC_OscConfig+0x2b6>
 8001cd2:	bf00      	nop
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	20000004 	.word	0x20000004
 8001cdc:	2300      	movs	r3, #0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00d      	beq.n	8001cfe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce2:	4baf      	ldr	r3, [pc, #700]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce6:	4aae      	ldr	r2, [pc, #696]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cec:	6593      	str	r3, [r2, #88]	; 0x58
 8001cee:	4bac      	ldr	r3, [pc, #688]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cfe:	4ba9      	ldr	r3, [pc, #676]	; (8001fa4 <HAL_RCC_OscConfig+0x57c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d118      	bne.n	8001d3c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d0a:	4ba6      	ldr	r3, [pc, #664]	; (8001fa4 <HAL_RCC_OscConfig+0x57c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4aa5      	ldr	r2, [pc, #660]	; (8001fa4 <HAL_RCC_OscConfig+0x57c>)
 8001d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d16:	f7fe ff83 	bl	8000c20 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d1e:	f7fe ff7f 	bl	8000c20 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e18d      	b.n	800204c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d30:	4b9c      	ldr	r3, [pc, #624]	; (8001fa4 <HAL_RCC_OscConfig+0x57c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d108      	bne.n	8001d56 <HAL_RCC_OscConfig+0x32e>
 8001d44:	4b96      	ldr	r3, [pc, #600]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d4a:	4a95      	ldr	r2, [pc, #596]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d54:	e024      	b.n	8001da0 <HAL_RCC_OscConfig+0x378>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	2b05      	cmp	r3, #5
 8001d5c:	d110      	bne.n	8001d80 <HAL_RCC_OscConfig+0x358>
 8001d5e:	4b90      	ldr	r3, [pc, #576]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d64:	4a8e      	ldr	r2, [pc, #568]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001d66:	f043 0304 	orr.w	r3, r3, #4
 8001d6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d6e:	4b8c      	ldr	r3, [pc, #560]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d74:	4a8a      	ldr	r2, [pc, #552]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d7e:	e00f      	b.n	8001da0 <HAL_RCC_OscConfig+0x378>
 8001d80:	4b87      	ldr	r3, [pc, #540]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d86:	4a86      	ldr	r2, [pc, #536]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001d88:	f023 0301 	bic.w	r3, r3, #1
 8001d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d90:	4b83      	ldr	r3, [pc, #524]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d96:	4a82      	ldr	r2, [pc, #520]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001d98:	f023 0304 	bic.w	r3, r3, #4
 8001d9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d016      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da8:	f7fe ff3a 	bl	8000c20 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dae:	e00a      	b.n	8001dc6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db0:	f7fe ff36 	bl	8000c20 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e142      	b.n	800204c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dc6:	4b76      	ldr	r3, [pc, #472]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0ed      	beq.n	8001db0 <HAL_RCC_OscConfig+0x388>
 8001dd4:	e015      	b.n	8001e02 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd6:	f7fe ff23 	bl	8000c20 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ddc:	e00a      	b.n	8001df4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dde:	f7fe ff1f 	bl	8000c20 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e12b      	b.n	800204c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001df4:	4b6a      	ldr	r3, [pc, #424]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1ed      	bne.n	8001dde <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e02:	7ffb      	ldrb	r3, [r7, #31]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d105      	bne.n	8001e14 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e08:	4b65      	ldr	r3, [pc, #404]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0c:	4a64      	ldr	r2, [pc, #400]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001e0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e12:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0320 	and.w	r3, r3, #32
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d03c      	beq.n	8001e9a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d01c      	beq.n	8001e62 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e28:	4b5d      	ldr	r3, [pc, #372]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001e2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e2e:	4a5c      	ldr	r2, [pc, #368]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e38:	f7fe fef2 	bl	8000c20 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e40:	f7fe feee 	bl	8000c20 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e0fc      	b.n	800204c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e52:	4b53      	ldr	r3, [pc, #332]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001e54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0ef      	beq.n	8001e40 <HAL_RCC_OscConfig+0x418>
 8001e60:	e01b      	b.n	8001e9a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e62:	4b4f      	ldr	r3, [pc, #316]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001e64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e68:	4a4d      	ldr	r2, [pc, #308]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001e6a:	f023 0301 	bic.w	r3, r3, #1
 8001e6e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e72:	f7fe fed5 	bl	8000c20 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e7a:	f7fe fed1 	bl	8000c20 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e0df      	b.n	800204c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e8c:	4b44      	ldr	r3, [pc, #272]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001e8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1ef      	bne.n	8001e7a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 80d3 	beq.w	800204a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ea4:	4b3e      	ldr	r3, [pc, #248]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 030c 	and.w	r3, r3, #12
 8001eac:	2b0c      	cmp	r3, #12
 8001eae:	f000 808d 	beq.w	8001fcc <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d15a      	bne.n	8001f70 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eba:	4b39      	ldr	r3, [pc, #228]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a38      	ldr	r2, [pc, #224]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001ec0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec6:	f7fe feab 	bl	8000c20 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ece:	f7fe fea7 	bl	8000c20 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e0b5      	b.n	800204c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee0:	4b2f      	ldr	r3, [pc, #188]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1f0      	bne.n	8001ece <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eec:	4b2c      	ldr	r3, [pc, #176]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001eee:	68da      	ldr	r2, [r3, #12]
 8001ef0:	4b2d      	ldr	r3, [pc, #180]	; (8001fa8 <HAL_RCC_OscConfig+0x580>)
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6a11      	ldr	r1, [r2, #32]
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001efc:	3a01      	subs	r2, #1
 8001efe:	0112      	lsls	r2, r2, #4
 8001f00:	4311      	orrs	r1, r2
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001f06:	0212      	lsls	r2, r2, #8
 8001f08:	4311      	orrs	r1, r2
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f0e:	0852      	lsrs	r2, r2, #1
 8001f10:	3a01      	subs	r2, #1
 8001f12:	0552      	lsls	r2, r2, #21
 8001f14:	4311      	orrs	r1, r2
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f1a:	0852      	lsrs	r2, r2, #1
 8001f1c:	3a01      	subs	r2, #1
 8001f1e:	0652      	lsls	r2, r2, #25
 8001f20:	4311      	orrs	r1, r2
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f26:	06d2      	lsls	r2, r2, #27
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	491d      	ldr	r1, [pc, #116]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f30:	4b1b      	ldr	r3, [pc, #108]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a1a      	ldr	r2, [pc, #104]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001f36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f3a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f3c:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4a17      	ldr	r2, [pc, #92]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f46:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7fe fe6a 	bl	8000c20 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f50:	f7fe fe66 	bl	8000c20 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e074      	b.n	800204c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f62:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0x528>
 8001f6e:	e06c      	b.n	800204a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f70:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001f76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f7a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001f7c:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	4a07      	ldr	r2, [pc, #28]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001f82:	f023 0303 	bic.w	r3, r3, #3
 8001f86:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001f88:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	4a04      	ldr	r2, [pc, #16]	; (8001fa0 <HAL_RCC_OscConfig+0x578>)
 8001f8e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f96:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f98:	f7fe fe42 	bl	8000c20 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f9e:	e00e      	b.n	8001fbe <HAL_RCC_OscConfig+0x596>
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40007000 	.word	0x40007000
 8001fa8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fac:	f7fe fe38 	bl	8000c20 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e046      	b.n	800204c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fbe:	4b25      	ldr	r3, [pc, #148]	; (8002054 <HAL_RCC_OscConfig+0x62c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f0      	bne.n	8001fac <HAL_RCC_OscConfig+0x584>
 8001fca:	e03e      	b.n	800204a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69db      	ldr	r3, [r3, #28]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e039      	b.n	800204c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001fd8:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <HAL_RCC_OscConfig+0x62c>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f003 0203 	and.w	r2, r3, #3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d12c      	bne.n	8002046 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d123      	bne.n	8002046 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002008:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800200a:	429a      	cmp	r2, r3
 800200c:	d11b      	bne.n	8002046 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002018:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800201a:	429a      	cmp	r2, r3
 800201c:	d113      	bne.n	8002046 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002028:	085b      	lsrs	r3, r3, #1
 800202a:	3b01      	subs	r3, #1
 800202c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800202e:	429a      	cmp	r2, r3
 8002030:	d109      	bne.n	8002046 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203c:	085b      	lsrs	r3, r3, #1
 800203e:	3b01      	subs	r3, #1
 8002040:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002042:	429a      	cmp	r2, r3
 8002044:	d001      	beq.n	800204a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3720      	adds	r7, #32
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40021000 	.word	0x40021000

08002058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e11e      	b.n	80022ae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002070:	4b91      	ldr	r3, [pc, #580]	; (80022b8 <HAL_RCC_ClockConfig+0x260>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 030f 	and.w	r3, r3, #15
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d910      	bls.n	80020a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207e:	4b8e      	ldr	r3, [pc, #568]	; (80022b8 <HAL_RCC_ClockConfig+0x260>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f023 020f 	bic.w	r2, r3, #15
 8002086:	498c      	ldr	r1, [pc, #560]	; (80022b8 <HAL_RCC_ClockConfig+0x260>)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	4313      	orrs	r3, r2
 800208c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800208e:	4b8a      	ldr	r3, [pc, #552]	; (80022b8 <HAL_RCC_ClockConfig+0x260>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	429a      	cmp	r2, r3
 800209a:	d001      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e106      	b.n	80022ae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d073      	beq.n	8002194 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d129      	bne.n	8002108 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020b4:	4b81      	ldr	r3, [pc, #516]	; (80022bc <HAL_RCC_ClockConfig+0x264>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e0f4      	b.n	80022ae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80020c4:	f000 f99e 	bl	8002404 <RCC_GetSysClockFreqFromPLLSource>
 80020c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4a7c      	ldr	r2, [pc, #496]	; (80022c0 <HAL_RCC_ClockConfig+0x268>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d93f      	bls.n	8002152 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80020d2:	4b7a      	ldr	r3, [pc, #488]	; (80022bc <HAL_RCC_ClockConfig+0x264>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d009      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d033      	beq.n	8002152 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d12f      	bne.n	8002152 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80020f2:	4b72      	ldr	r3, [pc, #456]	; (80022bc <HAL_RCC_ClockConfig+0x264>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020fa:	4a70      	ldr	r2, [pc, #448]	; (80022bc <HAL_RCC_ClockConfig+0x264>)
 80020fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002100:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002102:	2380      	movs	r3, #128	; 0x80
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	e024      	b.n	8002152 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b02      	cmp	r3, #2
 800210e:	d107      	bne.n	8002120 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002110:	4b6a      	ldr	r3, [pc, #424]	; (80022bc <HAL_RCC_ClockConfig+0x264>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d109      	bne.n	8002130 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0c6      	b.n	80022ae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002120:	4b66      	ldr	r3, [pc, #408]	; (80022bc <HAL_RCC_ClockConfig+0x264>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0be      	b.n	80022ae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002130:	f000 f8ce 	bl	80022d0 <HAL_RCC_GetSysClockFreq>
 8002134:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4a61      	ldr	r2, [pc, #388]	; (80022c0 <HAL_RCC_ClockConfig+0x268>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d909      	bls.n	8002152 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800213e:	4b5f      	ldr	r3, [pc, #380]	; (80022bc <HAL_RCC_ClockConfig+0x264>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002146:	4a5d      	ldr	r2, [pc, #372]	; (80022bc <HAL_RCC_ClockConfig+0x264>)
 8002148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800214c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800214e:	2380      	movs	r3, #128	; 0x80
 8002150:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002152:	4b5a      	ldr	r3, [pc, #360]	; (80022bc <HAL_RCC_ClockConfig+0x264>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f023 0203 	bic.w	r2, r3, #3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	4957      	ldr	r1, [pc, #348]	; (80022bc <HAL_RCC_ClockConfig+0x264>)
 8002160:	4313      	orrs	r3, r2
 8002162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002164:	f7fe fd5c 	bl	8000c20 <HAL_GetTick>
 8002168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216a:	e00a      	b.n	8002182 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800216c:	f7fe fd58 	bl	8000c20 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f241 3288 	movw	r2, #5000	; 0x1388
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e095      	b.n	80022ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002182:	4b4e      	ldr	r3, [pc, #312]	; (80022bc <HAL_RCC_ClockConfig+0x264>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 020c 	and.w	r2, r3, #12
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	429a      	cmp	r2, r3
 8002192:	d1eb      	bne.n	800216c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d023      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d005      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021ac:	4b43      	ldr	r3, [pc, #268]	; (80022bc <HAL_RCC_ClockConfig+0x264>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	4a42      	ldr	r2, [pc, #264]	; (80022bc <HAL_RCC_ClockConfig+0x264>)
 80021b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021b6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d007      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80021c4:	4b3d      	ldr	r3, [pc, #244]	; (80022bc <HAL_RCC_ClockConfig+0x264>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80021cc:	4a3b      	ldr	r2, [pc, #236]	; (80022bc <HAL_RCC_ClockConfig+0x264>)
 80021ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d4:	4b39      	ldr	r3, [pc, #228]	; (80022bc <HAL_RCC_ClockConfig+0x264>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	4936      	ldr	r1, [pc, #216]	; (80022bc <HAL_RCC_ClockConfig+0x264>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	608b      	str	r3, [r1, #8]
 80021e6:	e008      	b.n	80021fa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	2b80      	cmp	r3, #128	; 0x80
 80021ec:	d105      	bne.n	80021fa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80021ee:	4b33      	ldr	r3, [pc, #204]	; (80022bc <HAL_RCC_ClockConfig+0x264>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	4a32      	ldr	r2, [pc, #200]	; (80022bc <HAL_RCC_ClockConfig+0x264>)
 80021f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021f8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021fa:	4b2f      	ldr	r3, [pc, #188]	; (80022b8 <HAL_RCC_ClockConfig+0x260>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	d21d      	bcs.n	8002244 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002208:	4b2b      	ldr	r3, [pc, #172]	; (80022b8 <HAL_RCC_ClockConfig+0x260>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f023 020f 	bic.w	r2, r3, #15
 8002210:	4929      	ldr	r1, [pc, #164]	; (80022b8 <HAL_RCC_ClockConfig+0x260>)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	4313      	orrs	r3, r2
 8002216:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002218:	f7fe fd02 	bl	8000c20 <HAL_GetTick>
 800221c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800221e:	e00a      	b.n	8002236 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002220:	f7fe fcfe 	bl	8000c20 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	f241 3288 	movw	r2, #5000	; 0x1388
 800222e:	4293      	cmp	r3, r2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e03b      	b.n	80022ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002236:	4b20      	ldr	r3, [pc, #128]	; (80022b8 <HAL_RCC_ClockConfig+0x260>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	d1ed      	bne.n	8002220 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	2b00      	cmp	r3, #0
 800224e:	d008      	beq.n	8002262 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002250:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <HAL_RCC_ClockConfig+0x264>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	4917      	ldr	r1, [pc, #92]	; (80022bc <HAL_RCC_ClockConfig+0x264>)
 800225e:	4313      	orrs	r3, r2
 8002260:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	2b00      	cmp	r3, #0
 800226c:	d009      	beq.n	8002282 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800226e:	4b13      	ldr	r3, [pc, #76]	; (80022bc <HAL_RCC_ClockConfig+0x264>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	490f      	ldr	r1, [pc, #60]	; (80022bc <HAL_RCC_ClockConfig+0x264>)
 800227e:	4313      	orrs	r3, r2
 8002280:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002282:	f000 f825 	bl	80022d0 <HAL_RCC_GetSysClockFreq>
 8002286:	4601      	mov	r1, r0
 8002288:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <HAL_RCC_ClockConfig+0x264>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	091b      	lsrs	r3, r3, #4
 800228e:	f003 030f 	and.w	r3, r3, #15
 8002292:	4a0c      	ldr	r2, [pc, #48]	; (80022c4 <HAL_RCC_ClockConfig+0x26c>)
 8002294:	5cd3      	ldrb	r3, [r2, r3]
 8002296:	f003 031f 	and.w	r3, r3, #31
 800229a:	fa21 f303 	lsr.w	r3, r1, r3
 800229e:	4a0a      	ldr	r2, [pc, #40]	; (80022c8 <HAL_RCC_ClockConfig+0x270>)
 80022a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80022a2:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <HAL_RCC_ClockConfig+0x274>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe fc6e 	bl	8000b88 <HAL_InitTick>
 80022ac:	4603      	mov	r3, r0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40022000 	.word	0x40022000
 80022bc:	40021000 	.word	0x40021000
 80022c0:	04c4b400 	.word	0x04c4b400
 80022c4:	080034fc 	.word	0x080034fc
 80022c8:	20000000 	.word	0x20000000
 80022cc:	20000004 	.word	0x20000004

080022d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b087      	sub	sp, #28
 80022d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80022d6:	4b2c      	ldr	r3, [pc, #176]	; (8002388 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 030c 	and.w	r3, r3, #12
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d102      	bne.n	80022e8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022e2:	4b2a      	ldr	r3, [pc, #168]	; (800238c <HAL_RCC_GetSysClockFreq+0xbc>)
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	e047      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80022e8:	4b27      	ldr	r3, [pc, #156]	; (8002388 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 030c 	and.w	r3, r3, #12
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	d102      	bne.n	80022fa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022f4:	4b26      	ldr	r3, [pc, #152]	; (8002390 <HAL_RCC_GetSysClockFreq+0xc0>)
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	e03e      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80022fa:	4b23      	ldr	r3, [pc, #140]	; (8002388 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	2b0c      	cmp	r3, #12
 8002304:	d136      	bne.n	8002374 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002306:	4b20      	ldr	r3, [pc, #128]	; (8002388 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002310:	4b1d      	ldr	r3, [pc, #116]	; (8002388 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	091b      	lsrs	r3, r3, #4
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	3301      	adds	r3, #1
 800231c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2b03      	cmp	r3, #3
 8002322:	d10c      	bne.n	800233e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002324:	4a1a      	ldr	r2, [pc, #104]	; (8002390 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	fbb2 f3f3 	udiv	r3, r2, r3
 800232c:	4a16      	ldr	r2, [pc, #88]	; (8002388 <HAL_RCC_GetSysClockFreq+0xb8>)
 800232e:	68d2      	ldr	r2, [r2, #12]
 8002330:	0a12      	lsrs	r2, r2, #8
 8002332:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002336:	fb02 f303 	mul.w	r3, r2, r3
 800233a:	617b      	str	r3, [r7, #20]
      break;
 800233c:	e00c      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800233e:	4a13      	ldr	r2, [pc, #76]	; (800238c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	fbb2 f3f3 	udiv	r3, r2, r3
 8002346:	4a10      	ldr	r2, [pc, #64]	; (8002388 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002348:	68d2      	ldr	r2, [r2, #12]
 800234a:	0a12      	lsrs	r2, r2, #8
 800234c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002350:	fb02 f303 	mul.w	r3, r2, r3
 8002354:	617b      	str	r3, [r7, #20]
      break;
 8002356:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <HAL_RCC_GetSysClockFreq+0xb8>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	0e5b      	lsrs	r3, r3, #25
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	3301      	adds	r3, #1
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	e001      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002378:	693b      	ldr	r3, [r7, #16]
}
 800237a:	4618      	mov	r0, r3
 800237c:	371c      	adds	r7, #28
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40021000 	.word	0x40021000
 800238c:	00f42400 	.word	0x00f42400
 8002390:	016e3600 	.word	0x016e3600

08002394 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002398:	4b03      	ldr	r3, [pc, #12]	; (80023a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800239a:	681b      	ldr	r3, [r3, #0]
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20000000 	.word	0x20000000

080023ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023b0:	f7ff fff0 	bl	8002394 <HAL_RCC_GetHCLKFreq>
 80023b4:	4601      	mov	r1, r0
 80023b6:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	0a1b      	lsrs	r3, r3, #8
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	4a04      	ldr	r2, [pc, #16]	; (80023d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023c2:	5cd3      	ldrb	r3, [r2, r3]
 80023c4:	f003 031f 	and.w	r3, r3, #31
 80023c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40021000 	.word	0x40021000
 80023d4:	0800350c 	.word	0x0800350c

080023d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023dc:	f7ff ffda 	bl	8002394 <HAL_RCC_GetHCLKFreq>
 80023e0:	4601      	mov	r1, r0
 80023e2:	4b06      	ldr	r3, [pc, #24]	; (80023fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	0adb      	lsrs	r3, r3, #11
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	4a04      	ldr	r2, [pc, #16]	; (8002400 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023ee:	5cd3      	ldrb	r3, [r2, r3]
 80023f0:	f003 031f 	and.w	r3, r3, #31
 80023f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021000 	.word	0x40021000
 8002400:	0800350c 	.word	0x0800350c

08002404 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002404:	b480      	push	{r7}
 8002406:	b087      	sub	sp, #28
 8002408:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800240a:	4b1e      	ldr	r3, [pc, #120]	; (8002484 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002414:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	091b      	lsrs	r3, r3, #4
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	3301      	adds	r3, #1
 8002420:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	2b03      	cmp	r3, #3
 8002426:	d10c      	bne.n	8002442 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002428:	4a17      	ldr	r2, [pc, #92]	; (8002488 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002430:	4a14      	ldr	r2, [pc, #80]	; (8002484 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002432:	68d2      	ldr	r2, [r2, #12]
 8002434:	0a12      	lsrs	r2, r2, #8
 8002436:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800243a:	fb02 f303 	mul.w	r3, r2, r3
 800243e:	617b      	str	r3, [r7, #20]
    break;
 8002440:	e00c      	b.n	800245c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002442:	4a12      	ldr	r2, [pc, #72]	; (800248c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	fbb2 f3f3 	udiv	r3, r2, r3
 800244a:	4a0e      	ldr	r2, [pc, #56]	; (8002484 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800244c:	68d2      	ldr	r2, [r2, #12]
 800244e:	0a12      	lsrs	r2, r2, #8
 8002450:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002454:	fb02 f303 	mul.w	r3, r2, r3
 8002458:	617b      	str	r3, [r7, #20]
    break;
 800245a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800245c:	4b09      	ldr	r3, [pc, #36]	; (8002484 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	0e5b      	lsrs	r3, r3, #25
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	3301      	adds	r3, #1
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	fbb2 f3f3 	udiv	r3, r2, r3
 8002474:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002476:	687b      	ldr	r3, [r7, #4]
}
 8002478:	4618      	mov	r0, r3
 800247a:	371c      	adds	r7, #28
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	40021000 	.word	0x40021000
 8002488:	016e3600 	.word	0x016e3600
 800248c:	00f42400 	.word	0x00f42400

08002490 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002498:	2300      	movs	r3, #0
 800249a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800249c:	2300      	movs	r3, #0
 800249e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 8098 	beq.w	80025de <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ae:	2300      	movs	r3, #0
 80024b0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024b2:	4b43      	ldr	r3, [pc, #268]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10d      	bne.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024be:	4b40      	ldr	r3, [pc, #256]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c2:	4a3f      	ldr	r2, [pc, #252]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024c8:	6593      	str	r3, [r2, #88]	; 0x58
 80024ca:	4b3d      	ldr	r3, [pc, #244]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d6:	2301      	movs	r3, #1
 80024d8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024da:	4b3a      	ldr	r3, [pc, #232]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a39      	ldr	r2, [pc, #228]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80024e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024e6:	f7fe fb9b 	bl	8000c20 <HAL_GetTick>
 80024ea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024ec:	e009      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ee:	f7fe fb97 	bl	8000c20 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d902      	bls.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	74fb      	strb	r3, [r7, #19]
        break;
 8002500:	e005      	b.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002502:	4b30      	ldr	r3, [pc, #192]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0ef      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800250e:	7cfb      	ldrb	r3, [r7, #19]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d159      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002514:	4b2a      	ldr	r3, [pc, #168]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800251e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d01e      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	429a      	cmp	r2, r3
 800252e:	d019      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002530:	4b23      	ldr	r3, [pc, #140]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800253a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800253c:	4b20      	ldr	r3, [pc, #128]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800253e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002542:	4a1f      	ldr	r2, [pc, #124]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800254c:	4b1c      	ldr	r3, [pc, #112]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800254e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002552:	4a1b      	ldr	r2, [pc, #108]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800255c:	4a18      	ldr	r2, [pc, #96]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d016      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256e:	f7fe fb57 	bl	8000c20 <HAL_GetTick>
 8002572:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002574:	e00b      	b.n	800258e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002576:	f7fe fb53 	bl	8000c20 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f241 3288 	movw	r2, #5000	; 0x1388
 8002584:	4293      	cmp	r3, r2
 8002586:	d902      	bls.n	800258e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	74fb      	strb	r3, [r7, #19]
            break;
 800258c:	e006      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800258e:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0ec      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800259c:	7cfb      	ldrb	r3, [r7, #19]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10b      	bne.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025a2:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b0:	4903      	ldr	r1, [pc, #12]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025b8:	e008      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025ba:	7cfb      	ldrb	r3, [r7, #19]
 80025bc:	74bb      	strb	r3, [r7, #18]
 80025be:	e005      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025c8:	7cfb      	ldrb	r3, [r7, #19]
 80025ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025cc:	7c7b      	ldrb	r3, [r7, #17]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d105      	bne.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d2:	4baf      	ldr	r3, [pc, #700]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d6:	4aae      	ldr	r2, [pc, #696]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00a      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025ea:	4ba9      	ldr	r3, [pc, #676]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f0:	f023 0203 	bic.w	r2, r3, #3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	49a5      	ldr	r1, [pc, #660]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00a      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800260c:	4ba0      	ldr	r3, [pc, #640]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800260e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002612:	f023 020c 	bic.w	r2, r3, #12
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	499d      	ldr	r1, [pc, #628]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00a      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800262e:	4b98      	ldr	r3, [pc, #608]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002634:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	4994      	ldr	r1, [pc, #592]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800263e:	4313      	orrs	r3, r2
 8002640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0308 	and.w	r3, r3, #8
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00a      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002650:	4b8f      	ldr	r3, [pc, #572]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002656:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	498c      	ldr	r1, [pc, #560]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002660:	4313      	orrs	r3, r2
 8002662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00a      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002672:	4b87      	ldr	r3, [pc, #540]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002678:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	4983      	ldr	r1, [pc, #524]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002682:	4313      	orrs	r3, r2
 8002684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0320 	and.w	r3, r3, #32
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00a      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002694:	4b7e      	ldr	r3, [pc, #504]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	497b      	ldr	r1, [pc, #492]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00a      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026b6:	4b76      	ldr	r3, [pc, #472]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	4972      	ldr	r1, [pc, #456]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00a      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026d8:	4b6d      	ldr	r3, [pc, #436]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	496a      	ldr	r1, [pc, #424]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00a      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026fa:	4b65      	ldr	r3, [pc, #404]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002700:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	4961      	ldr	r1, [pc, #388]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800270a:	4313      	orrs	r3, r2
 800270c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00a      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800271c:	4b5c      	ldr	r3, [pc, #368]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800271e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002722:	f023 0203 	bic.w	r2, r3, #3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272a:	4959      	ldr	r1, [pc, #356]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00a      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800273e:	4b54      	ldr	r3, [pc, #336]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002744:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	4950      	ldr	r1, [pc, #320]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800274e:	4313      	orrs	r3, r2
 8002750:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800275c:	2b00      	cmp	r3, #0
 800275e:	d015      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002760:	4b4b      	ldr	r3, [pc, #300]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002766:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	4948      	ldr	r1, [pc, #288]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002770:	4313      	orrs	r3, r2
 8002772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800277e:	d105      	bne.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002780:	4b43      	ldr	r3, [pc, #268]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	4a42      	ldr	r2, [pc, #264]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002786:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800278a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002794:	2b00      	cmp	r3, #0
 8002796:	d015      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002798:	4b3d      	ldr	r3, [pc, #244]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a6:	493a      	ldr	r1, [pc, #232]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027b6:	d105      	bne.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027b8:	4b35      	ldr	r3, [pc, #212]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	4a34      	ldr	r2, [pc, #208]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027c2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d015      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80027d0:	4b2f      	ldr	r3, [pc, #188]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027de:	492c      	ldr	r1, [pc, #176]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027ee:	d105      	bne.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027f0:	4b27      	ldr	r3, [pc, #156]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	4a26      	ldr	r2, [pc, #152]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027fa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d015      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002808:	4b21      	ldr	r3, [pc, #132]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800280a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002816:	491e      	ldr	r1, [pc, #120]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002818:	4313      	orrs	r3, r2
 800281a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002822:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002826:	d105      	bne.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002828:	4b19      	ldr	r3, [pc, #100]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4a18      	ldr	r2, [pc, #96]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800282e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002832:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d015      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002840:	4b13      	ldr	r3, [pc, #76]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002846:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	4910      	ldr	r1, [pc, #64]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002850:	4313      	orrs	r3, r2
 8002852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800285e:	d105      	bne.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002860:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	4a0a      	ldr	r2, [pc, #40]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002866:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800286a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d018      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800287a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	4902      	ldr	r1, [pc, #8]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800288e:	e001      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002890:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002898:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800289c:	d105      	bne.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800289e:	4b21      	ldr	r3, [pc, #132]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	4a20      	ldr	r2, [pc, #128]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80028a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a8:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d015      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80028b6:	4b1b      	ldr	r3, [pc, #108]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80028b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028bc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c4:	4917      	ldr	r1, [pc, #92]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d4:	d105      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80028d6:	4b13      	ldr	r3, [pc, #76]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	4a12      	ldr	r2, [pc, #72]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80028dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e0:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d015      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80028ee:	4b0d      	ldr	r3, [pc, #52]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80028f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fc:	4909      	ldr	r1, [pc, #36]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002908:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800290c:	d105      	bne.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800290e:	4b05      	ldr	r3, [pc, #20]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	4a04      	ldr	r2, [pc, #16]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002914:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002918:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800291a:	7cbb      	ldrb	r3, [r7, #18]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40021000 	.word	0x40021000

08002928 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e042      	b.n	80029c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002940:	2b00      	cmp	r3, #0
 8002942:	d106      	bne.n	8002952 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7fe f84b 	bl	80009e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2224      	movs	r2, #36	; 0x24
 8002956:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0201 	bic.w	r2, r2, #1
 8002968:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f82c 	bl	80029c8 <UART_SetConfig>
 8002970:	4603      	mov	r3, r0
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e022      	b.n	80029c0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297e:	2b00      	cmp	r3, #0
 8002980:	d002      	beq.n	8002988 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 faf2 	bl	8002f6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002996:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689a      	ldr	r2, [r3, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0201 	orr.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 fb79 	bl	80030b0 <UART_CheckIdleState>
 80029be:	4603      	mov	r3, r0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029c8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80029cc:	b088      	sub	sp, #32
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	431a      	orrs	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029f2:	69fa      	ldr	r2, [r7, #28]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	4bb1      	ldr	r3, [pc, #708]	; (8002cc4 <UART_SetConfig+0x2fc>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6812      	ldr	r2, [r2, #0]
 8002a06:	69f9      	ldr	r1, [r7, #28]
 8002a08:	430b      	orrs	r3, r1
 8002a0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4aa6      	ldr	r2, [pc, #664]	; (8002cc8 <UART_SetConfig+0x300>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d004      	beq.n	8002a3c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	69fa      	ldr	r2, [r7, #28]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002a46:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6812      	ldr	r2, [r2, #0]
 8002a4e:	69f9      	ldr	r1, [r7, #28]
 8002a50:	430b      	orrs	r3, r1
 8002a52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5a:	f023 010f 	bic.w	r1, r3, #15
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a97      	ldr	r2, [pc, #604]	; (8002ccc <UART_SetConfig+0x304>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d121      	bne.n	8002ab8 <UART_SetConfig+0xf0>
 8002a74:	4b96      	ldr	r3, [pc, #600]	; (8002cd0 <UART_SetConfig+0x308>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	2b03      	cmp	r3, #3
 8002a80:	d816      	bhi.n	8002ab0 <UART_SetConfig+0xe8>
 8002a82:	a201      	add	r2, pc, #4	; (adr r2, 8002a88 <UART_SetConfig+0xc0>)
 8002a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a88:	08002a99 	.word	0x08002a99
 8002a8c:	08002aa5 	.word	0x08002aa5
 8002a90:	08002a9f 	.word	0x08002a9f
 8002a94:	08002aab 	.word	0x08002aab
 8002a98:	2301      	movs	r3, #1
 8002a9a:	76fb      	strb	r3, [r7, #27]
 8002a9c:	e0e8      	b.n	8002c70 <UART_SetConfig+0x2a8>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	76fb      	strb	r3, [r7, #27]
 8002aa2:	e0e5      	b.n	8002c70 <UART_SetConfig+0x2a8>
 8002aa4:	2304      	movs	r3, #4
 8002aa6:	76fb      	strb	r3, [r7, #27]
 8002aa8:	e0e2      	b.n	8002c70 <UART_SetConfig+0x2a8>
 8002aaa:	2308      	movs	r3, #8
 8002aac:	76fb      	strb	r3, [r7, #27]
 8002aae:	e0df      	b.n	8002c70 <UART_SetConfig+0x2a8>
 8002ab0:	2310      	movs	r3, #16
 8002ab2:	76fb      	strb	r3, [r7, #27]
 8002ab4:	bf00      	nop
 8002ab6:	e0db      	b.n	8002c70 <UART_SetConfig+0x2a8>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a85      	ldr	r2, [pc, #532]	; (8002cd4 <UART_SetConfig+0x30c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d134      	bne.n	8002b2c <UART_SetConfig+0x164>
 8002ac2:	4b83      	ldr	r3, [pc, #524]	; (8002cd0 <UART_SetConfig+0x308>)
 8002ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac8:	f003 030c 	and.w	r3, r3, #12
 8002acc:	2b0c      	cmp	r3, #12
 8002ace:	d829      	bhi.n	8002b24 <UART_SetConfig+0x15c>
 8002ad0:	a201      	add	r2, pc, #4	; (adr r2, 8002ad8 <UART_SetConfig+0x110>)
 8002ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad6:	bf00      	nop
 8002ad8:	08002b0d 	.word	0x08002b0d
 8002adc:	08002b25 	.word	0x08002b25
 8002ae0:	08002b25 	.word	0x08002b25
 8002ae4:	08002b25 	.word	0x08002b25
 8002ae8:	08002b19 	.word	0x08002b19
 8002aec:	08002b25 	.word	0x08002b25
 8002af0:	08002b25 	.word	0x08002b25
 8002af4:	08002b25 	.word	0x08002b25
 8002af8:	08002b13 	.word	0x08002b13
 8002afc:	08002b25 	.word	0x08002b25
 8002b00:	08002b25 	.word	0x08002b25
 8002b04:	08002b25 	.word	0x08002b25
 8002b08:	08002b1f 	.word	0x08002b1f
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	76fb      	strb	r3, [r7, #27]
 8002b10:	e0ae      	b.n	8002c70 <UART_SetConfig+0x2a8>
 8002b12:	2302      	movs	r3, #2
 8002b14:	76fb      	strb	r3, [r7, #27]
 8002b16:	e0ab      	b.n	8002c70 <UART_SetConfig+0x2a8>
 8002b18:	2304      	movs	r3, #4
 8002b1a:	76fb      	strb	r3, [r7, #27]
 8002b1c:	e0a8      	b.n	8002c70 <UART_SetConfig+0x2a8>
 8002b1e:	2308      	movs	r3, #8
 8002b20:	76fb      	strb	r3, [r7, #27]
 8002b22:	e0a5      	b.n	8002c70 <UART_SetConfig+0x2a8>
 8002b24:	2310      	movs	r3, #16
 8002b26:	76fb      	strb	r3, [r7, #27]
 8002b28:	bf00      	nop
 8002b2a:	e0a1      	b.n	8002c70 <UART_SetConfig+0x2a8>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a69      	ldr	r2, [pc, #420]	; (8002cd8 <UART_SetConfig+0x310>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d120      	bne.n	8002b78 <UART_SetConfig+0x1b0>
 8002b36:	4b66      	ldr	r3, [pc, #408]	; (8002cd0 <UART_SetConfig+0x308>)
 8002b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002b40:	2b10      	cmp	r3, #16
 8002b42:	d00f      	beq.n	8002b64 <UART_SetConfig+0x19c>
 8002b44:	2b10      	cmp	r3, #16
 8002b46:	d802      	bhi.n	8002b4e <UART_SetConfig+0x186>
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <UART_SetConfig+0x190>
 8002b4c:	e010      	b.n	8002b70 <UART_SetConfig+0x1a8>
 8002b4e:	2b20      	cmp	r3, #32
 8002b50:	d005      	beq.n	8002b5e <UART_SetConfig+0x196>
 8002b52:	2b30      	cmp	r3, #48	; 0x30
 8002b54:	d009      	beq.n	8002b6a <UART_SetConfig+0x1a2>
 8002b56:	e00b      	b.n	8002b70 <UART_SetConfig+0x1a8>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	76fb      	strb	r3, [r7, #27]
 8002b5c:	e088      	b.n	8002c70 <UART_SetConfig+0x2a8>
 8002b5e:	2302      	movs	r3, #2
 8002b60:	76fb      	strb	r3, [r7, #27]
 8002b62:	e085      	b.n	8002c70 <UART_SetConfig+0x2a8>
 8002b64:	2304      	movs	r3, #4
 8002b66:	76fb      	strb	r3, [r7, #27]
 8002b68:	e082      	b.n	8002c70 <UART_SetConfig+0x2a8>
 8002b6a:	2308      	movs	r3, #8
 8002b6c:	76fb      	strb	r3, [r7, #27]
 8002b6e:	e07f      	b.n	8002c70 <UART_SetConfig+0x2a8>
 8002b70:	2310      	movs	r3, #16
 8002b72:	76fb      	strb	r3, [r7, #27]
 8002b74:	bf00      	nop
 8002b76:	e07b      	b.n	8002c70 <UART_SetConfig+0x2a8>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a57      	ldr	r2, [pc, #348]	; (8002cdc <UART_SetConfig+0x314>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d120      	bne.n	8002bc4 <UART_SetConfig+0x1fc>
 8002b82:	4b53      	ldr	r3, [pc, #332]	; (8002cd0 <UART_SetConfig+0x308>)
 8002b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b88:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002b8c:	2b40      	cmp	r3, #64	; 0x40
 8002b8e:	d00f      	beq.n	8002bb0 <UART_SetConfig+0x1e8>
 8002b90:	2b40      	cmp	r3, #64	; 0x40
 8002b92:	d802      	bhi.n	8002b9a <UART_SetConfig+0x1d2>
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <UART_SetConfig+0x1dc>
 8002b98:	e010      	b.n	8002bbc <UART_SetConfig+0x1f4>
 8002b9a:	2b80      	cmp	r3, #128	; 0x80
 8002b9c:	d005      	beq.n	8002baa <UART_SetConfig+0x1e2>
 8002b9e:	2bc0      	cmp	r3, #192	; 0xc0
 8002ba0:	d009      	beq.n	8002bb6 <UART_SetConfig+0x1ee>
 8002ba2:	e00b      	b.n	8002bbc <UART_SetConfig+0x1f4>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	76fb      	strb	r3, [r7, #27]
 8002ba8:	e062      	b.n	8002c70 <UART_SetConfig+0x2a8>
 8002baa:	2302      	movs	r3, #2
 8002bac:	76fb      	strb	r3, [r7, #27]
 8002bae:	e05f      	b.n	8002c70 <UART_SetConfig+0x2a8>
 8002bb0:	2304      	movs	r3, #4
 8002bb2:	76fb      	strb	r3, [r7, #27]
 8002bb4:	e05c      	b.n	8002c70 <UART_SetConfig+0x2a8>
 8002bb6:	2308      	movs	r3, #8
 8002bb8:	76fb      	strb	r3, [r7, #27]
 8002bba:	e059      	b.n	8002c70 <UART_SetConfig+0x2a8>
 8002bbc:	2310      	movs	r3, #16
 8002bbe:	76fb      	strb	r3, [r7, #27]
 8002bc0:	bf00      	nop
 8002bc2:	e055      	b.n	8002c70 <UART_SetConfig+0x2a8>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a45      	ldr	r2, [pc, #276]	; (8002ce0 <UART_SetConfig+0x318>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d124      	bne.n	8002c18 <UART_SetConfig+0x250>
 8002bce:	4b40      	ldr	r3, [pc, #256]	; (8002cd0 <UART_SetConfig+0x308>)
 8002bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bdc:	d012      	beq.n	8002c04 <UART_SetConfig+0x23c>
 8002bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002be2:	d802      	bhi.n	8002bea <UART_SetConfig+0x222>
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d007      	beq.n	8002bf8 <UART_SetConfig+0x230>
 8002be8:	e012      	b.n	8002c10 <UART_SetConfig+0x248>
 8002bea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bee:	d006      	beq.n	8002bfe <UART_SetConfig+0x236>
 8002bf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bf4:	d009      	beq.n	8002c0a <UART_SetConfig+0x242>
 8002bf6:	e00b      	b.n	8002c10 <UART_SetConfig+0x248>
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	76fb      	strb	r3, [r7, #27]
 8002bfc:	e038      	b.n	8002c70 <UART_SetConfig+0x2a8>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	76fb      	strb	r3, [r7, #27]
 8002c02:	e035      	b.n	8002c70 <UART_SetConfig+0x2a8>
 8002c04:	2304      	movs	r3, #4
 8002c06:	76fb      	strb	r3, [r7, #27]
 8002c08:	e032      	b.n	8002c70 <UART_SetConfig+0x2a8>
 8002c0a:	2308      	movs	r3, #8
 8002c0c:	76fb      	strb	r3, [r7, #27]
 8002c0e:	e02f      	b.n	8002c70 <UART_SetConfig+0x2a8>
 8002c10:	2310      	movs	r3, #16
 8002c12:	76fb      	strb	r3, [r7, #27]
 8002c14:	bf00      	nop
 8002c16:	e02b      	b.n	8002c70 <UART_SetConfig+0x2a8>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a2a      	ldr	r2, [pc, #168]	; (8002cc8 <UART_SetConfig+0x300>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d124      	bne.n	8002c6c <UART_SetConfig+0x2a4>
 8002c22:	4b2b      	ldr	r3, [pc, #172]	; (8002cd0 <UART_SetConfig+0x308>)
 8002c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c30:	d012      	beq.n	8002c58 <UART_SetConfig+0x290>
 8002c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c36:	d802      	bhi.n	8002c3e <UART_SetConfig+0x276>
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d007      	beq.n	8002c4c <UART_SetConfig+0x284>
 8002c3c:	e012      	b.n	8002c64 <UART_SetConfig+0x29c>
 8002c3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c42:	d006      	beq.n	8002c52 <UART_SetConfig+0x28a>
 8002c44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c48:	d009      	beq.n	8002c5e <UART_SetConfig+0x296>
 8002c4a:	e00b      	b.n	8002c64 <UART_SetConfig+0x29c>
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	76fb      	strb	r3, [r7, #27]
 8002c50:	e00e      	b.n	8002c70 <UART_SetConfig+0x2a8>
 8002c52:	2302      	movs	r3, #2
 8002c54:	76fb      	strb	r3, [r7, #27]
 8002c56:	e00b      	b.n	8002c70 <UART_SetConfig+0x2a8>
 8002c58:	2304      	movs	r3, #4
 8002c5a:	76fb      	strb	r3, [r7, #27]
 8002c5c:	e008      	b.n	8002c70 <UART_SetConfig+0x2a8>
 8002c5e:	2308      	movs	r3, #8
 8002c60:	76fb      	strb	r3, [r7, #27]
 8002c62:	e005      	b.n	8002c70 <UART_SetConfig+0x2a8>
 8002c64:	2310      	movs	r3, #16
 8002c66:	76fb      	strb	r3, [r7, #27]
 8002c68:	bf00      	nop
 8002c6a:	e001      	b.n	8002c70 <UART_SetConfig+0x2a8>
 8002c6c:	2310      	movs	r3, #16
 8002c6e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a14      	ldr	r2, [pc, #80]	; (8002cc8 <UART_SetConfig+0x300>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	f040 80a1 	bne.w	8002dbe <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c7c:	7efb      	ldrb	r3, [r7, #27]
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d836      	bhi.n	8002cf0 <UART_SetConfig+0x328>
 8002c82:	a201      	add	r2, pc, #4	; (adr r2, 8002c88 <UART_SetConfig+0x2c0>)
 8002c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c88:	08002cad 	.word	0x08002cad
 8002c8c:	08002cf1 	.word	0x08002cf1
 8002c90:	08002cb5 	.word	0x08002cb5
 8002c94:	08002cf1 	.word	0x08002cf1
 8002c98:	08002cbb 	.word	0x08002cbb
 8002c9c:	08002cf1 	.word	0x08002cf1
 8002ca0:	08002cf1 	.word	0x08002cf1
 8002ca4:	08002cf1 	.word	0x08002cf1
 8002ca8:	08002ce9 	.word	0x08002ce9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cac:	f7ff fb7e 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 8002cb0:	6178      	str	r0, [r7, #20]
        break;
 8002cb2:	e022      	b.n	8002cfa <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <UART_SetConfig+0x31c>)
 8002cb6:	617b      	str	r3, [r7, #20]
        break;
 8002cb8:	e01f      	b.n	8002cfa <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cba:	f7ff fb09 	bl	80022d0 <HAL_RCC_GetSysClockFreq>
 8002cbe:	6178      	str	r0, [r7, #20]
        break;
 8002cc0:	e01b      	b.n	8002cfa <UART_SetConfig+0x332>
 8002cc2:	bf00      	nop
 8002cc4:	cfff69f3 	.word	0xcfff69f3
 8002cc8:	40008000 	.word	0x40008000
 8002ccc:	40013800 	.word	0x40013800
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	40004400 	.word	0x40004400
 8002cd8:	40004800 	.word	0x40004800
 8002cdc:	40004c00 	.word	0x40004c00
 8002ce0:	40005000 	.word	0x40005000
 8002ce4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ce8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cec:	617b      	str	r3, [r7, #20]
        break;
 8002cee:	e004      	b.n	8002cfa <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	76bb      	strb	r3, [r7, #26]
        break;
 8002cf8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 811d 	beq.w	8002f3c <UART_SetConfig+0x574>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	4a97      	ldr	r2, [pc, #604]	; (8002f64 <UART_SetConfig+0x59c>)
 8002d08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d14:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	4413      	add	r3, r2
 8002d20:	68ba      	ldr	r2, [r7, #8]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d305      	bcc.n	8002d32 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d902      	bls.n	8002d38 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	76bb      	strb	r3, [r7, #26]
 8002d36:	e101      	b.n	8002f3c <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f04f 0100 	mov.w	r1, #0
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	4a87      	ldr	r2, [pc, #540]	; (8002f64 <UART_SetConfig+0x59c>)
 8002d46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	f04f 0400 	mov.w	r4, #0
 8002d50:	461a      	mov	r2, r3
 8002d52:	4623      	mov	r3, r4
 8002d54:	f7fd fa60 	bl	8000218 <__aeabi_uldivmod>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	460c      	mov	r4, r1
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4622      	mov	r2, r4
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	f04f 0400 	mov.w	r4, #0
 8002d68:	0214      	lsls	r4, r2, #8
 8002d6a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002d6e:	020b      	lsls	r3, r1, #8
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6852      	ldr	r2, [r2, #4]
 8002d74:	0852      	lsrs	r2, r2, #1
 8002d76:	4611      	mov	r1, r2
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	eb13 0b01 	adds.w	fp, r3, r1
 8002d80:	eb44 0c02 	adc.w	ip, r4, r2
 8002d84:	4658      	mov	r0, fp
 8002d86:	4661      	mov	r1, ip
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f04f 0400 	mov.w	r4, #0
 8002d90:	461a      	mov	r2, r3
 8002d92:	4623      	mov	r3, r4
 8002d94:	f7fd fa40 	bl	8000218 <__aeabi_uldivmod>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	460c      	mov	r4, r1
 8002d9c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002da4:	d308      	bcc.n	8002db8 <UART_SetConfig+0x3f0>
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dac:	d204      	bcs.n	8002db8 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	60da      	str	r2, [r3, #12]
 8002db6:	e0c1      	b.n	8002f3c <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	76bb      	strb	r3, [r7, #26]
 8002dbc:	e0be      	b.n	8002f3c <UART_SetConfig+0x574>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dc6:	d164      	bne.n	8002e92 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8002dc8:	7efb      	ldrb	r3, [r7, #27]
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d827      	bhi.n	8002e1e <UART_SetConfig+0x456>
 8002dce:	a201      	add	r2, pc, #4	; (adr r2, 8002dd4 <UART_SetConfig+0x40c>)
 8002dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd4:	08002df9 	.word	0x08002df9
 8002dd8:	08002e01 	.word	0x08002e01
 8002ddc:	08002e09 	.word	0x08002e09
 8002de0:	08002e1f 	.word	0x08002e1f
 8002de4:	08002e0f 	.word	0x08002e0f
 8002de8:	08002e1f 	.word	0x08002e1f
 8002dec:	08002e1f 	.word	0x08002e1f
 8002df0:	08002e1f 	.word	0x08002e1f
 8002df4:	08002e17 	.word	0x08002e17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002df8:	f7ff fad8 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 8002dfc:	6178      	str	r0, [r7, #20]
        break;
 8002dfe:	e013      	b.n	8002e28 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e00:	f7ff faea 	bl	80023d8 <HAL_RCC_GetPCLK2Freq>
 8002e04:	6178      	str	r0, [r7, #20]
        break;
 8002e06:	e00f      	b.n	8002e28 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e08:	4b57      	ldr	r3, [pc, #348]	; (8002f68 <UART_SetConfig+0x5a0>)
 8002e0a:	617b      	str	r3, [r7, #20]
        break;
 8002e0c:	e00c      	b.n	8002e28 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e0e:	f7ff fa5f 	bl	80022d0 <HAL_RCC_GetSysClockFreq>
 8002e12:	6178      	str	r0, [r7, #20]
        break;
 8002e14:	e008      	b.n	8002e28 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e1a:	617b      	str	r3, [r7, #20]
        break;
 8002e1c:	e004      	b.n	8002e28 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	76bb      	strb	r3, [r7, #26]
        break;
 8002e26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 8086 	beq.w	8002f3c <UART_SetConfig+0x574>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	4a4b      	ldr	r2, [pc, #300]	; (8002f64 <UART_SetConfig+0x59c>)
 8002e36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e42:	005a      	lsls	r2, r3, #1
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	085b      	lsrs	r3, r3, #1
 8002e4a:	441a      	add	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	2b0f      	cmp	r3, #15
 8002e5c:	d916      	bls.n	8002e8c <UART_SetConfig+0x4c4>
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e64:	d212      	bcs.n	8002e8c <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	f023 030f 	bic.w	r3, r3, #15
 8002e6e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	085b      	lsrs	r3, r3, #1
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	89fb      	ldrh	r3, [r7, #14]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	89fa      	ldrh	r2, [r7, #14]
 8002e88:	60da      	str	r2, [r3, #12]
 8002e8a:	e057      	b.n	8002f3c <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	76bb      	strb	r3, [r7, #26]
 8002e90:	e054      	b.n	8002f3c <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e92:	7efb      	ldrb	r3, [r7, #27]
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d828      	bhi.n	8002eea <UART_SetConfig+0x522>
 8002e98:	a201      	add	r2, pc, #4	; (adr r2, 8002ea0 <UART_SetConfig+0x4d8>)
 8002e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e9e:	bf00      	nop
 8002ea0:	08002ec5 	.word	0x08002ec5
 8002ea4:	08002ecd 	.word	0x08002ecd
 8002ea8:	08002ed5 	.word	0x08002ed5
 8002eac:	08002eeb 	.word	0x08002eeb
 8002eb0:	08002edb 	.word	0x08002edb
 8002eb4:	08002eeb 	.word	0x08002eeb
 8002eb8:	08002eeb 	.word	0x08002eeb
 8002ebc:	08002eeb 	.word	0x08002eeb
 8002ec0:	08002ee3 	.word	0x08002ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ec4:	f7ff fa72 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 8002ec8:	6178      	str	r0, [r7, #20]
        break;
 8002eca:	e013      	b.n	8002ef4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ecc:	f7ff fa84 	bl	80023d8 <HAL_RCC_GetPCLK2Freq>
 8002ed0:	6178      	str	r0, [r7, #20]
        break;
 8002ed2:	e00f      	b.n	8002ef4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ed4:	4b24      	ldr	r3, [pc, #144]	; (8002f68 <UART_SetConfig+0x5a0>)
 8002ed6:	617b      	str	r3, [r7, #20]
        break;
 8002ed8:	e00c      	b.n	8002ef4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eda:	f7ff f9f9 	bl	80022d0 <HAL_RCC_GetSysClockFreq>
 8002ede:	6178      	str	r0, [r7, #20]
        break;
 8002ee0:	e008      	b.n	8002ef4 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ee6:	617b      	str	r3, [r7, #20]
        break;
 8002ee8:	e004      	b.n	8002ef4 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	76bb      	strb	r3, [r7, #26]
        break;
 8002ef2:	bf00      	nop
    }

    if (pclk != 0U)
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d020      	beq.n	8002f3c <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	4a19      	ldr	r2, [pc, #100]	; (8002f64 <UART_SetConfig+0x59c>)
 8002f00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f04:	461a      	mov	r2, r3
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	fbb3 f2f2 	udiv	r2, r3, r2
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	085b      	lsrs	r3, r3, #1
 8002f12:	441a      	add	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	2b0f      	cmp	r3, #15
 8002f24:	d908      	bls.n	8002f38 <UART_SetConfig+0x570>
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f2c:	d204      	bcs.n	8002f38 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	60da      	str	r2, [r3, #12]
 8002f36:	e001      	b.n	8002f3c <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8002f58:	7ebb      	ldrb	r3, [r7, #26]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3720      	adds	r7, #32
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002f64:	08003524 	.word	0x08003524
 8002f68:	00f42400 	.word	0x00f42400

08002f6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00a      	beq.n	8002f96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00a      	beq.n	8002fb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00a      	beq.n	8002fda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fde:	f003 0308 	and.w	r3, r3, #8
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003000:	f003 0310 	and.w	r3, r3, #16
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00a      	beq.n	800301e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003022:	f003 0320 	and.w	r3, r3, #32
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003048:	2b00      	cmp	r3, #0
 800304a:	d01a      	beq.n	8003082 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003066:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800306a:	d10a      	bne.n	8003082 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00a      	beq.n	80030a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	605a      	str	r2, [r3, #4]
  }
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030c0:	f7fd fdae 	bl	8000c20 <HAL_GetTick>
 80030c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d10e      	bne.n	80030f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f82c 	bl	8003140 <UART_WaitOnFlagUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e022      	b.n	8003138 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	d10e      	bne.n	800311e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003100:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f816 	bl	8003140 <UART_WaitOnFlagUntilTimeout>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d001      	beq.n	800311e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e00c      	b.n	8003138 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2220      	movs	r2, #32
 8003122:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2220      	movs	r2, #32
 800312a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	4613      	mov	r3, r2
 800314e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003150:	e062      	b.n	8003218 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003158:	d05e      	beq.n	8003218 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315a:	f7fd fd61 	bl	8000c20 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	429a      	cmp	r2, r3
 8003168:	d302      	bcc.n	8003170 <UART_WaitOnFlagUntilTimeout+0x30>
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d11d      	bne.n	80031ac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800317e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0201 	bic.w	r2, r2, #1
 800318e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2220      	movs	r2, #32
 8003194:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2220      	movs	r2, #32
 800319c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e045      	b.n	8003238 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d02e      	beq.n	8003218 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031c8:	d126      	bne.n	8003218 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031d2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031e2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0201 	bic.w	r2, r2, #1
 80031f2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2220      	movs	r2, #32
 80031f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2220      	movs	r2, #32
 8003200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2220      	movs	r2, #32
 8003208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e00f      	b.n	8003238 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	69da      	ldr	r2, [r3, #28]
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	4013      	ands	r3, r2
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	429a      	cmp	r2, r3
 8003226:	bf0c      	ite	eq
 8003228:	2301      	moveq	r3, #1
 800322a:	2300      	movne	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	461a      	mov	r2, r3
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	429a      	cmp	r2, r3
 8003234:	d08d      	beq.n	8003152 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800324e:	2b01      	cmp	r3, #1
 8003250:	d101      	bne.n	8003256 <HAL_UARTEx_DisableFifoMode+0x16>
 8003252:	2302      	movs	r3, #2
 8003254:	e027      	b.n	80032a6 <HAL_UARTEx_DisableFifoMode+0x66>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2224      	movs	r2, #36	; 0x24
 8003262:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0201 	bic.w	r2, r2, #1
 800327c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003284:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2220      	movs	r2, #32
 8003298:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b084      	sub	sp, #16
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80032c6:	2302      	movs	r3, #2
 80032c8:	e02d      	b.n	8003326 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2224      	movs	r2, #36	; 0x24
 80032d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0201 	bic.w	r2, r2, #1
 80032f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f850 	bl	80033ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2220      	movs	r2, #32
 8003318:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b084      	sub	sp, #16
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
 8003336:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800333e:	2b01      	cmp	r3, #1
 8003340:	d101      	bne.n	8003346 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003342:	2302      	movs	r3, #2
 8003344:	e02d      	b.n	80033a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2224      	movs	r2, #36	; 0x24
 8003352:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0201 	bic.w	r2, r2, #1
 800336c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f812 	bl	80033ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2220      	movs	r2, #32
 8003394:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
	...

080033ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b089      	sub	sp, #36	; 0x24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80033b4:	4a2f      	ldr	r2, [pc, #188]	; (8003474 <UARTEx_SetNbDataToProcess+0xc8>)
 80033b6:	f107 0314 	add.w	r3, r7, #20
 80033ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033be:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80033c2:	4a2d      	ldr	r2, [pc, #180]	; (8003478 <UARTEx_SetNbDataToProcess+0xcc>)
 80033c4:	f107 030c 	add.w	r3, r7, #12
 80033c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033cc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d108      	bne.n	80033ea <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80033e8:	e03d      	b.n	8003466 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80033ea:	2308      	movs	r3, #8
 80033ec:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80033ee:	2308      	movs	r3, #8
 80033f0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	0e5b      	lsrs	r3, r3, #25
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	0f5b      	lsrs	r3, r3, #29
 800340a:	b2db      	uxtb	r3, r3
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003412:	7fbb      	ldrb	r3, [r7, #30]
 8003414:	7f3a      	ldrb	r2, [r7, #28]
 8003416:	f107 0120 	add.w	r1, r7, #32
 800341a:	440a      	add	r2, r1
 800341c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003420:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003424:	7f3a      	ldrb	r2, [r7, #28]
 8003426:	f107 0120 	add.w	r1, r7, #32
 800342a:	440a      	add	r2, r1
 800342c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003430:	fb93 f3f2 	sdiv	r3, r3, r2
 8003434:	b29a      	uxth	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800343c:	7ffb      	ldrb	r3, [r7, #31]
 800343e:	7f7a      	ldrb	r2, [r7, #29]
 8003440:	f107 0120 	add.w	r1, r7, #32
 8003444:	440a      	add	r2, r1
 8003446:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800344a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800344e:	7f7a      	ldrb	r2, [r7, #29]
 8003450:	f107 0120 	add.w	r1, r7, #32
 8003454:	440a      	add	r2, r1
 8003456:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800345a:	fb93 f3f2 	sdiv	r3, r3, r2
 800345e:	b29a      	uxth	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003466:	bf00      	nop
 8003468:	3724      	adds	r7, #36	; 0x24
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	080034ec 	.word	0x080034ec
 8003478:	080034f4 	.word	0x080034f4

0800347c <__libc_init_array>:
 800347c:	b570      	push	{r4, r5, r6, lr}
 800347e:	4e0d      	ldr	r6, [pc, #52]	; (80034b4 <__libc_init_array+0x38>)
 8003480:	4c0d      	ldr	r4, [pc, #52]	; (80034b8 <__libc_init_array+0x3c>)
 8003482:	1ba4      	subs	r4, r4, r6
 8003484:	10a4      	asrs	r4, r4, #2
 8003486:	2500      	movs	r5, #0
 8003488:	42a5      	cmp	r5, r4
 800348a:	d109      	bne.n	80034a0 <__libc_init_array+0x24>
 800348c:	4e0b      	ldr	r6, [pc, #44]	; (80034bc <__libc_init_array+0x40>)
 800348e:	4c0c      	ldr	r4, [pc, #48]	; (80034c0 <__libc_init_array+0x44>)
 8003490:	f000 f820 	bl	80034d4 <_init>
 8003494:	1ba4      	subs	r4, r4, r6
 8003496:	10a4      	asrs	r4, r4, #2
 8003498:	2500      	movs	r5, #0
 800349a:	42a5      	cmp	r5, r4
 800349c:	d105      	bne.n	80034aa <__libc_init_array+0x2e>
 800349e:	bd70      	pop	{r4, r5, r6, pc}
 80034a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034a4:	4798      	blx	r3
 80034a6:	3501      	adds	r5, #1
 80034a8:	e7ee      	b.n	8003488 <__libc_init_array+0xc>
 80034aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034ae:	4798      	blx	r3
 80034b0:	3501      	adds	r5, #1
 80034b2:	e7f2      	b.n	800349a <__libc_init_array+0x1e>
 80034b4:	08003544 	.word	0x08003544
 80034b8:	08003544 	.word	0x08003544
 80034bc:	08003544 	.word	0x08003544
 80034c0:	08003548 	.word	0x08003548

080034c4 <memset>:
 80034c4:	4402      	add	r2, r0
 80034c6:	4603      	mov	r3, r0
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d100      	bne.n	80034ce <memset+0xa>
 80034cc:	4770      	bx	lr
 80034ce:	f803 1b01 	strb.w	r1, [r3], #1
 80034d2:	e7f9      	b.n	80034c8 <memset+0x4>

080034d4 <_init>:
 80034d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034d6:	bf00      	nop
 80034d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034da:	bc08      	pop	{r3}
 80034dc:	469e      	mov	lr, r3
 80034de:	4770      	bx	lr

080034e0 <_fini>:
 80034e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e2:	bf00      	nop
 80034e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034e6:	bc08      	pop	{r3}
 80034e8:	469e      	mov	lr, r3
 80034ea:	4770      	bx	lr
